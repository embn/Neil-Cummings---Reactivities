{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/userProfile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/errors/TestErrors.tsx","features/errors/ServerError.tsx","features/errors/NotFound.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/Loading.tsx","features/activities/details/ActivityDetailedChat.tsx","app/common/globalization/dateFormat.ts","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","app/common/modals/ModalContainer.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivityCard.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","response","use","a","headers","JSON","parse","error","status","config","toast","method","toUpperCase","errors","hasOwnProperty","history","push","stateErrors","key","flat","store","commonStore","setServerError","Promise","reject","request","token","Authorization","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profile","username","profile","updateFollowing","userName","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","listFollowing","predicate","listActivities","Activity","formValues","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","UserProfile","displayName","image","UserProfileFormValues","bio","ActivityStore","activities","Map","selectedActivity","formIsOpen","loading","loadingInitial","pagingParams","set","setActivity","userStore","isGoing","attendees","some","x","isHost","hostUserName","host","find","Date","getActivity","setPagingParams","setLoadingInitial","state","setPagination","setPredicate","value","resetPredicate","forEach","loadActivities","agentParams","result","console","log","loadActivity","runInAction","createActivity","attendee","updateActivity","updatedActivity","deleteActivity","updateAttendance","index","findIndex","splice","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","ProfileStore","followings","loadingProfile","loadingFollowings","uploadingPhoto","loadingPhoto","savingProfile","loadingActivities","activeTab","loadProfile","photo","photos","isMain","setImage","p","updateProfile","setDisplayName","activityStore","followingCount","i","length","loadFollowing","setActiveTab","tab","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","isSubmitting","className","Header","textAlign","placeholder","autoFocus","type","render","marginBottom","fluid","ValidationErrors","Message","List","map","err","validationSchema","yup","required","handleSubmit","isValid","dirty","autoComplete","disabled","Segment","vertical","size","isLoggedIn","TestErrors","useState","Group","widths","baseUrl","primary","sub","message","marginTop","NotFound","Icon","Inline","width","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","e","preventDefault","handleFollow","Card","Description","str","substring","truncate","extra","followingStyle","borderColor","borderWidth","horizontal","Popup","hoverable","trigger","circular","ActivityListItem","secondary","clearing","floated","groupedActivities","group","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","Loading","Dimmer","border","Comment","resetForm","Yup","rows","onKeyPress","shiftKey","Avatar","authorName","Author","authorDisplayName","fontStyle","Metadata","formatDistanceToNow","Text","whiteSpace","dateFormat","dateTimeFormat","activityImageStyle","filter","activityImageTextStyle","bottom","left","height","ribbon","zIndex","top","padding","verticalAlign","relaxed","divided","Extra","useParams","ActivityDetailedSideBar","Modal","onClose","MyTextArea","MyTextSelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","nullable","activityFormValues","setActivityFormValues","enableReinitialize","newActivity","uuid","handleFormSubmit","placeholderText","showTimeSelect","timeCaption","timeFormat","setEditMode","isCurrentUser","editMode","setMode","Tab","Pane","ojectFit","Meta","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","headerContent","PhotoWidgetCropper","setCropper","imagePreview","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyle","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","targetPhoto","setTargetPhoto","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":";wZAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCbxBC,IAAMC,SAASC,QAAUC,OAOzBH,IAAMI,aAAaC,SAASC,IAA5B,+BAAAC,EAAA,MAAgC,WAAMF,GAAN,eAAAE,EAAA,iFAItBZ,EAAaU,EAASG,QAAT,YAJS,uBAMxBH,EAASX,KAAO,IAAID,EAAgBY,EAASX,KAAMe,KAAKC,MAAMf,IANtC,kBAOjBU,GAPiB,gCASrBA,GATqB,2CAAhC,uDAUG,SAACM,GAAuB,IAAD,EACtB,EAA+BA,EAAMN,SAA9BX,EAAP,EAAOA,KAAMkB,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,OACrB,OAAQD,GACJ,KAAK,IAOD,GANoB,kBAATlB,GACPoB,IAAMH,MAAMjB,GAEqB,SAAjC,UAAAmB,EAAOE,cAAP,eAAeC,gBAA2BtB,EAAKuB,OAAOC,eAAe,OACrEC,GAAQC,KAAK,cAEb1B,EAAKuB,OAAQ,CACb,IAAMI,EAAc,GACpB,IAAK,IAAMC,KAAO5B,EAAKuB,OAEfvB,EAAKuB,OAAOK,IACZD,EAAYD,KAAK1B,EAAKuB,OAAOK,IAGrC,MAAMD,EAAYE,OAEtB,MACJ,KAAK,IACDT,IAAMH,MAAM,gBACZ,MACJ,KAAK,IACDQ,GAAQC,KAAK,cACb,MACJ,KAAK,IACDI,EAAMC,YAAYC,eAAehC,GACjCyB,GAAQC,KAAK,iBAGrB,OAAOO,QAAQC,OAAOjB,MAG1BX,IAAMI,aAAayB,QAAQvB,KAAI,SAAAO,GAC3B,IAAMiB,EAAQN,EAAMC,YAAYK,MAEhC,OADIA,IAAOjB,EAAOL,QAAQuB,cAAf,iBAAyCD,IAC7CjB,KAGX,IAAMmB,EAAe,SAAK3B,GAAL,OAAqCA,EAASX,MAE7DuC,EACG,SAAKC,GAAL,OAAqBlC,IAAMmC,IAAOD,GAAKE,KAAKJ,IAD/CC,EAEI,SAAKC,EAAaG,GAAlB,OAA+BrC,IAAMsC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFjEC,EAGG,SAAKC,EAAaG,GAAlB,OAA+BrC,IAAMuC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH/DC,EAIG,SAAKC,GAAL,OAAqBlC,IAAMwC,OAAUN,GAAKE,KAAKJ,IAsCzCS,EALD,CACVC,WAhCe,CACfC,KAAM,SAACC,GAAD,OAA6B5C,IAAMmC,IAAiC,cAAe,CAAES,WAAUR,KAAKJ,IAC1Ga,QAAS,SAACC,GAAD,OAAgBb,EAAA,qBAAqCa,KAC9DC,OAAQ,SAACC,GAAD,OAAmCf,EAAoB,aAAce,IAC7EC,OAAQ,SAACD,GAAD,OAAmCf,EAAA,qBAAiCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,qBAAiCa,KACzDI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,qBAAkCa,EAAlC,WAA+C,MA2BvEK,QAzBY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAuB7EE,QApBY,CACZrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,mBAAsCwB,KACjER,OAAQ,SAACS,GAAD,OAAmCzB,EAAA,WAAyByB,IACpEC,gBAAiB,SAACC,GAAD,OAAsB3B,EAAA,kBAAyB2B,GAAY,KAC5EC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB9D,IAAMsC,KAAY,SAAUyB,EAAU,CACzCvD,QAAS,CAAE,eAAgB,yBAE9B4B,KAAKJ,IAEVkC,aAAc,SAACpB,GAAD,OAAgBb,EAAA,iBAAuBa,EAAvB,YAAqC,KACnEqB,YAAa,SAACrB,GAAD,OAAgBb,EAAA,iBAAuBa,KACpDsB,cAAe,SAACR,EAAkBS,GAAnB,OAAyCpC,EAAA,kBAAuC2B,EAAvC,sBAA6DS,KACrHC,eAAgB,SAACV,EAAkBS,GAAnB,OAAyCpC,EAAA,mBAAyC2B,EAAzC,iCAA0ES,OCvF1HE,EACT,WAAYC,GAAkC,oBAC1CC,OAAOC,OAAO9E,KAAM4E,IAIfG,EAST,WAAYH,GACX,yBATD1B,QAAc8B,EASd,KARAC,MAAgB,GAQhB,KAPAC,KAAoB,KAOpB,KANAC,YAAsB,GAMtB,KALAC,SAAmB,GAKnB,KAJAC,KAAe,GAIf,KAHAC,MAAgB,GAIRV,IACA5E,KAAKkD,GAAK0B,EAAW1B,GACrBlD,KAAKiF,MAAQL,EAAWK,MACxBjF,KAAKkF,KAAQN,EAAWM,KACxBlF,KAAKmF,YAAeP,EAAWO,YAC/BnF,KAAKoF,SAAYR,EAAWQ,SAC5BpF,KAAKqF,KAAQT,EAAWS,KACxBrF,KAAKsF,MAASV,EAAWU,QCzBxBC,EACT,WAAY7B,GAAa,oBACrB1D,KAAKgE,SAAWN,EAAKM,SACrBhE,KAAKwF,YAAc9B,EAAK8B,YACxBxF,KAAKyF,MAAQ/B,EAAK+B,OAGbC,EAIT,WAAY5B,GAAwB,yBAHpC0B,YAAsB,GAGa,KAFnCG,SAAeX,EAGXhF,KAAKwF,YAAc1B,EAAQ0B,YAC3BxF,KAAK2F,IAAM7B,EAAQ6B,KCtBNC,E,WAUjB,aAAe,IAAD,gCATdC,WAAa,IAAIC,IASH,KARdC,sBAAyCf,EAQ3B,KAPdgB,YAAsB,EAOR,KANdC,SAAmB,EAML,KALdC,gBAA0B,EAKZ,KAJdnG,WAAgC,KAIlB,KAHdoG,aAAe,IAAIlG,EAGL,KAFdwE,WAAY,IAAIqB,KAAMM,IAAI,OAAO,GAEnB,KAaNC,YAAc,SAACjD,GACnB,IAAMM,EAAO9B,EAAM0E,UAAU5C,KACzBA,IACAN,EAASmD,QAAUnD,EAASoD,UAAUC,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,WAAaN,EAAKM,YACpEZ,EAASuD,OAASvD,EAASwD,eAAiBlD,EAAKM,SACjDZ,EAASyD,KAAOzD,EAASoD,UAAUM,MAAK,SAAAJ,GAAC,OAAIA,EAAE1C,WAAaZ,EAASwD,iBAEzExD,EAAS8B,KAAO,IAAI6B,KAAK3D,EAAS8B,MAClC,EAAKW,WAAWO,IAAIhD,EAASF,GAAIE,IArBvB,KAuBN4D,YAAc,SAAC9D,GACnB,OAAO,EAAK2C,WAAWtD,IAAIW,IAxBjB,KA0Dd+D,gBAAkB,SAACd,GACf,EAAKA,aAAeA,GA3DV,KA6Dde,kBAAoB,SAACC,GACjB,EAAKjB,eAAiBiB,GA9DZ,KAgEdC,cAAgB,SAACrH,GACb,EAAKA,WAAaA,GAjER,KAmEdsH,aAAe,SAAC5C,EAAmB6C,GAC/B,IAAMC,EAAiB,WACnB,EAAK9C,UAAU+C,SAAQ,SAACF,EAAO5F,GACf,cAARA,GAAqB,EAAK+C,UAAU7B,OAAOlB,OAGvD,OAAQ+C,GAEJ,IAAK,MACD8C,IACA,EAAK9C,UAAU2B,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDmB,IACA,EAAK9C,UAAU2B,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDmB,IACA,EAAK9C,UAAU2B,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAK3B,UAAU7B,OAAO,aACtB,EAAK6B,UAAU2B,IAAI,YAAakB,KAzF9B,KAgGdG,eAhGc,sBAgGG,4BAAA9G,EAAA,6DACb,EAAKuF,gBAAiB,EADT,kBAGYrD,EAAMC,WAAWC,KAAK,EAAK2E,aAHvC,QAGHC,EAHG,QAIF7H,KAAK0H,SAAQ,SAAApE,GAChB,EAAKiD,YAAYjD,MAErB,EAAKgE,cAAcO,EAAO5H,YAPjB,gDAST6H,QAAQC,IAAR,MATS,yBAWT,EAAKX,mBAAkB,GAXd,4EAhGH,KA+GdY,aA/Gc,uCA+GC,WAAO5E,GAAP,eAAAvC,EAAA,2DACPyC,EAAW,EAAK4D,YAAY9D,IADrB,gBAGP,EAAK6C,iBAAmB3C,EAHjB,8BAKP,EAAK8C,gBAAiB,EALf,kBAOcrD,EAAMC,WAAWG,QAAQC,GAPvC,OAOHE,EAPG,OAQH,EAAKiD,YAAYjD,GACjB2E,aAAY,WACR,EAAKhC,iBAAmB3C,KAVzB,kDAcHwE,QAAQC,IAAR,MAdG,yBAiBH,EAAKX,mBAAkB,GAjBpB,8CAsBJ9D,GAtBI,gEA/GD,2DAuId4E,eAvIc,uCAuIG,WAAOpD,GAAP,mBAAAjE,EAAA,6DAEP+C,EAAO9B,EAAM0E,UAAU5C,KACvBuE,EAAW,IAAI1C,EAAY7B,GAHpB,kBAKHb,EAAMC,WAAWK,OAAOyB,GALrB,QAMHxB,EAAW,IAAIuB,EAASC,IACrBgC,aAAelD,EAAMM,SAC9BZ,EAASoD,UAAY,CAACyB,GACtB,EAAK5B,YAAYjD,GAGjB2E,aAAY,WACR,EAAKhC,iBAAmB3C,KAbnB,kDAgBTwE,QAAQC,IAAR,MAhBS,0DAvIH,2DA0JdK,eA1Jc,uCA0JG,WAAOtD,GAAP,SAAAjE,EAAA,+EAEHkC,EAAMC,WAAWO,OAAOuB,GAFrB,OAGTmD,aAAY,WACR,GAAInD,EAAW1B,GAAI,CACf,IAAIiF,EAAe,2BACZ,EAAKnB,YAAYpC,EAAW1B,KAAQ0B,GAE3C,EAAKiB,WAAWO,IAAIxB,EAAW1B,GAAIiF,GACnC,EAAKpC,iBAAmBoC,MATvB,+CAeTP,QAAQC,IAAR,MAfS,wDA1JH,2DA4KdO,eA5Kc,uCA4KG,WAAOlF,GAAP,SAAAvC,EAAA,6DACb,EAAKsF,SAAU,EADF,kBAGHpD,EAAMC,WAAWF,OAAOM,GAHrB,OAIT6E,aAAY,WACR,EAAKlC,WAAWjD,OAAOM,GACvB,EAAK+C,SAAU,KANV,gDAUT2B,QAAQC,IAAR,MACAE,aAAY,WACR,EAAK9B,SAAU,KAZV,yDA5KH,2DA4LdoC,iBA5Lc,sBA4LK,4BAAA1H,EAAA,6DACT+C,EAAO9B,EAAM0E,UAAU5C,KAC7B,EAAKuC,SAAU,EAFA,kBAILpD,EAAMC,WAAWQ,OAAO,EAAKyC,iBAAkB7C,IAJ1C,OAKX6E,aAAY,WAAO,IAAD,EACd,aAAI,EAAKhC,wBAAT,aAAI,EAAuBQ,QAAS,CAChC,IAAI+B,EAAQ,EAAKvC,iBAAiBS,UAAU+B,WAAU,SAAA7B,GAAC,OAAIA,EAAE1C,YAAF,OAAeN,QAAf,IAAeA,OAAf,EAAeA,EAAMM,aAChF,EAAK+B,iBAAiBS,UAAUgC,OAAOF,EAAO,GAC9C,EAAKvC,iBAAiBQ,SAAU,MAC7B,CAAC,IAAD,IACG0B,EAAW,IAAI1C,EAAY7B,GACjC,YAAKqC,wBAAL,mBAAuBS,iBAAvB,SAAkChF,KAAKyG,GACvC,EAAKlC,iBAAkBQ,SAAU,EAErC,EAAKV,WAAWO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBAf7C,gDAmBX6B,QAAQC,IAAR,MAnBW,yBAsBXE,aAAY,kBAAM,EAAK9B,SAAU,KAtBtB,4EA5LL,KAqNdwC,qBArNc,sBAqNS,sBAAA9H,EAAA,6DACnB,EAAKsF,SAAU,EADI,kBAGTpD,EAAMC,WAAWQ,OAAO,EAAKyC,iBAAkB7C,IAHtC,OAIf6E,aAAY,WAAO,IAAD,EACd,EAAKhC,iBAAkB2C,cAAc,UAAC,EAAK3C,wBAAN,aAAC,EAAuB2C,aAC7D,EAAK7C,WAAWO,IAAI,EAAKL,iBAAkB7C,GAAI,EAAK6C,qBANzC,gDAUf6B,QAAQC,IAAR,MAVe,yBAYfE,aAAY,kBAAM,EAAK9B,SAAU,KAZlB,4EArNT,KAoOd0C,sBAAwB,WACpBZ,aAAY,WACR,EAAKhC,sBAAmBf,MAtOlB,KAyOd4D,wBAA0B,SAAC5E,GACvB,EAAK6B,WAAW2B,SAAQ,SAAApE,GACpBA,EAASoD,UAAUgB,SAAQ,SAAAS,GACnBA,EAASjE,WAAaA,IACtBiE,EAASY,UAAYZ,EAASa,iBAAmBb,EAASa,iBAC1Db,EAASY,WAAaZ,EAASY,kBA7O3CE,YAAmB/I,MAEnBgJ,aACI,kBAAM,EAAKvE,UAAUwE,UACrB,WAEI,EAAK9C,aAAe,IAAIlG,EACxB,EAAK4F,WAAWqD,QAChB,EAAKzB,oB,6CAiBjB,WACI,IAAMzE,EAAS,IAAImG,gBAUnB,OATAnG,EAAOqB,OAAO,aAAcrE,KAAKmG,aAAajG,WAAWkJ,YACzDpG,EAAOqB,OAAO,WAAYrE,KAAKmG,aAAahG,SAASiJ,YACrDpJ,KAAKyE,UAAU+C,SAAQ,SAACF,EAAO5F,GACf,cAARA,EACAsB,EAAOqB,OAAO3C,EAAM4F,EAAe+B,eAEnCrG,EAAOqB,OAAO3C,EAAK4F,MAGpBtE,I,4BAEX,WACI,OAAOsG,MAAMC,KAAKvJ,KAAK6F,WAAW2D,UAAUC,MAAK,SAAC9I,EAAG+I,GAAJ,OAC7C/I,EAAEuE,KAAMyE,UAAYD,EAAExE,KAAMyE,e,6BAIpC,WAEI,OAAO9E,OAAO+E,QACV5J,KAAK6J,iBAAiBC,QAAO,SAACjE,EAAYzC,GACtC,IAAM8B,EAAO6E,kBAAO3G,EAAS8B,KAAO,eAKpC,OADAW,EAAWX,GAAQW,EAAWX,GAAX,sBAAuBW,EAAWX,IAAlC,CAAyC9B,IAAY,CAACA,GAClEyC,IACR,S,cCpEMmE,E,WAajB,aAAe,IAAD,gCAZdlG,QAA8B,KAYhB,KAXdmG,WAA4B,GAWd,KAVdpE,WAA6B,GAUf,KATdqE,gBAAiB,EASH,KARdC,mBAAoB,EAQN,KAPdC,gBAAiB,EAOH,KANdC,cAAe,EAMD,KALdC,eAAgB,EAKF,KAJdrE,SAAU,EAII,KAHdsE,mBAAoB,EAGN,KAFdC,UAAY,EAEE,KAuBdC,YAvBc,uCAuBA,WAAOzG,GAAP,eAAArD,EAAA,6DACV,EAAKuJ,gBAAiB,EADZ,kBAGgBrH,EAAMe,QAAQrB,IAAIyB,GAHlC,OAGAF,EAHA,OAINiE,aAAY,WACR,EAAKjE,QAAUA,KALb,gDASN8D,QAAQC,IAAR,MATM,yBAYNE,aAAY,kBAAM,EAAKmC,gBAAiB,KAZlC,4EAvBA,2DAsCdjG,YAtCc,uCAsCA,WAAOC,GAAP,eAAAvD,EAAA,6DACV,EAAKyJ,gBAAiB,EADZ,kBAGcvH,EAAMe,QAAQK,YAAYC,GAHxC,OAGAwG,EAHA,OAIN3C,aAAY,WACW,IAAD,EAAd,EAAKjE,UACL,YAAKA,QAAQ6G,cAAb,SAAqBnJ,KAAKkJ,GACtBA,EAAME,QAAUhJ,EAAM0E,UAAU5C,OAChC9B,EAAM0E,UAAUuE,SAASH,EAAMpI,KAC/B,EAAKwB,QAAQ2B,MAAQiF,EAAMpI,SATjC,gDAcNsF,QAAQC,IAAR,MAdM,yBAgBNE,aAAY,kBAAM,EAAKqC,gBAAiB,KAhBlC,4EAtCA,2DAyDd9F,aAzDc,uCAyDC,WAAOoG,GAAP,SAAA/J,EAAA,6DACX,EAAK0J,cAAe,EADT,kBAGDxH,EAAMe,QAAQU,aAAaoG,EAAMxH,IAHhC,OAIPtB,EAAM0E,UAAUuE,SAASH,EAAMpI,KAC/ByF,aAAY,WACJ,EAAKjE,SAAW,EAAKA,QAAQ6G,SAC7B,EAAK7G,QAAQ6G,OAAO7D,MAAK,SAAAJ,GAAC,OAAIA,EAAEkE,UAASA,QAAS,EAClD,EAAK9G,QAAQ6G,OAAO7D,MAAK,SAAAJ,GAAC,OAAIA,EAAExD,KAAOwH,EAAMxH,MAAK0H,QAAS,EAC3D,EAAK9G,QAAQ2B,MAAQiF,EAAMpI,QAT5B,gDAaPsF,QAAQC,IAAR,MAbO,yBAePE,aAAY,kBAAM,EAAKsC,cAAe,KAf/B,4EAzDD,2DA2Ed9F,YA3Ec,uCA2EA,WAAOmG,GAAP,SAAA/J,EAAA,6DACV,EAAK0J,cAAe,EADV,kBAGAxH,EAAMe,QAAQW,YAAYmG,EAAMxH,IAHhC,OAIN6E,aAAY,WACR,GAAI,EAAKjE,SAAW,EAAKA,QAAQ6G,OAAQ,CACrC,IAAMrC,EAAQ,EAAKxE,QAAQ6G,OAAOpC,WAAU,SAAAuC,GAAC,OAAIA,EAAE5H,KAAOwH,EAAMxH,MAChE,EAAKY,QAAQ6G,OAAOnC,OAAOF,EAAO,OAPpC,gDAWNV,QAAQC,IAAR,MAXM,yBAaNE,aAAY,kBAAM,EAAKsC,cAAe,KAbhC,4EA3EA,2DA2FdU,cA3Fc,uCA2FE,WAAOjH,GAAP,SAAAnD,EAAA,6DACZ,EAAK2J,eAAgB,EADT,kBAGFzH,EAAMe,QAAQP,OAAOS,GAHnB,OAIRiE,aAAY,WAAO,IAAD,KACV,YAAKjE,eAAL,eAAc0B,cAAe1B,EAAQ0B,eAAR,UAAwB5D,EAAM0E,UAAU5C,YAAxC,aAAwB,EAAsB8B,cAC3E5D,EAAM0E,UAAU0E,eAAelH,EAAQ0B,aAE3C,EAAK1B,QAAL,2BAAmB,EAAKA,SAAYA,MARhC,gDAWR8D,QAAQC,IAAR,MAXQ,yBAaRE,aAAY,kBAAM,EAAKuC,eAAgB,KAb/B,4EA3FF,2DA2GdvG,gBA3Gc,uCA2GI,WAAOC,EAAkB6E,GAAzB,SAAAlI,EAAA,6DACd,EAAKsF,SAAU,EADD,kBAGJpD,EAAMe,QAAQG,gBAAgBC,GAH1B,OAIVpC,EAAMqJ,cAAcrC,wBAAwB5E,GAC5C+D,aAAY,WAAO,IAAD,IACV,EAAKjE,SAAW,EAAKA,QAAQE,YAAb,UAA0BpC,EAAM0E,UAAU5C,YAA1C,aAA0B,EAAsBM,WAAY,EAAKF,QAAQE,WAAaA,IAEtG6E,EAAY,EAAK/E,QAAQgF,iBAAmB,EAAKhF,QAAQgF,iBACzD,EAAKhF,QAAQ+E,WAAa,EAAK/E,QAAQ+E,WAEvC,EAAK/E,SAAW,EAAKA,QAAQE,YAAb,UAA0BpC,EAAM0E,UAAU5C,YAA1C,aAA0B,EAAsBM,YAEhE6E,EAAY,EAAK/E,QAAQoH,iBAAmB,EAAKpH,QAAQoH,kBAG7D,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKlB,WAAWmB,OAAQD,IAAK,CAC7C,IAAMrH,EAAU,EAAKmG,WAAWkB,GAChC,GAAIrH,EAAQE,WAAaA,EAAU,CAC/B6E,EAAY/E,EAAQgF,iBAAmBhF,EAAQgF,iBAC/ChF,EAAQ+E,WAAa/E,EAAQ+E,UAC7B,WArBF,gDA0BVjB,QAAQC,IAAR,MA1BU,yBA4BVE,aAAY,WAAQ,EAAK9B,SAAU,KA5BzB,4EA3GJ,6DA0IdoF,cA1Ic,uCA0IE,WAAO5G,GAAP,eAAA9D,EAAA,6DACZ,EAAKwJ,mBAAoB,EADb,kBAGiBtH,EAAMe,QAAQY,cAAc,EAAKV,QAASE,SAAUS,GAHrE,OAGFwF,EAHE,OAIRlC,aAAY,WACR,EAAKkC,WAAaA,KALd,gDAQRrC,QAAQC,IAAR,MARQ,yBAURE,aAAY,WACR,EAAKoC,mBAAoB,KAXrB,4EA1IF,2DAyJdmB,aAAe,SAACC,GACZ,EAAKf,UAAYe,GA1JP,KA4Jd9D,eA5Jc,uCA4JG,WAAOzD,EAAkBS,GAAzB,eAAA9D,EAAA,6DACb,EAAK4J,mBAAoB,EADZ,kBAGgB1H,EAAMe,QAAQc,eAAeV,EAAUS,GAHvD,OAGHoB,EAHG,OAITkC,aAAY,WACR,EAAKlC,WAAaA,KALb,gDAQT+B,QAAQC,IAAR,MARS,yBAUTE,aAAY,WACR,EAAKwC,mBAAoB,KAXpB,4EA5JH,wDACVxB,YAAmB/I,MACnBgJ,aACI,kBAAM,EAAKwB,aACX,SAAAA,GACI,IAAI/F,EACc,IAAd+F,IAAiB/F,EAAY,aACf,IAAd+F,IAAiB/F,EAAY,aAC7BA,EACA,EAAK4G,cAAc5G,GAGnB,EAAKwF,WAAa,M,+CAKlC,WACI,SAAIrI,EAAM0E,UAAU5C,OAAQ1D,KAAK8D,UACtBlC,EAAM0E,UAAU5C,KAAKM,WAAahE,KAAK8D,QAAQE,a,KC/B7CwH,E,WAGjB,aAAe,IAAD,gCAFd9H,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAOgI,GAAP,eAAA9K,EAAA,+EAEmBkC,EAAMU,QAAQE,MAAMgI,GAFvC,OAEM/H,EAFN,OAGA9B,EAAMC,YAAY6J,SAAShI,EAAKxB,OAEhC6F,aAAY,kBAAM,EAAKrE,KAAOA,KAC9BnC,GAAQC,KAAK,eACbI,EAAM+J,WAAWC,aAPjB,uHARM,2DAoBdC,OAAS,WACLjK,EAAMC,YAAY6J,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKtI,KAAO,KACZnC,GAAQC,KAAK,MAxBH,KA0BdmC,SA1Bc,uCA0BH,WAAO8H,GAAP,eAAA9K,EAAA,+EAEgBkC,EAAMU,QAAQI,SAAS8H,GAFvC,OAEG/H,EAFH,OAGH9B,EAAMC,YAAY6J,SAAShI,EAAKxB,OAEhC6F,aAAY,kBAAM,EAAKrE,KAAOA,KAC9BnC,GAAQC,KAAK,eACbI,EAAM+J,WAAWC,aAPd,uHA1BG,2DAsCdK,QAtCc,sBAsCJ,4BAAAtL,EAAA,+EAEiBkC,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFqE,aAAY,kBAAM,EAAKrE,KAAOA,KAH5B,gDAKFkE,QAAQC,IAAR,MALE,yDAtCI,KA8CdgD,SAAW,SAACpF,GACJ,EAAK/B,OAAM,EAAKA,KAAK+B,MAAQA,IA/CvB,KAiDduF,eAAiB,SAACkB,GACV,EAAKxI,OAAM,EAAKA,KAAK8B,YAAc0G,IAjDvCnD,YAAmB/I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCGT9B,EAAe,CACxBqJ,cAAe,IAAIrF,EACnB/D,YAAa,ICXb,aAAe,IAAD,gCAJdd,MAA4B,KAId,KAHdmB,MAAuB4J,OAAOC,aAAaI,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAedtK,eAAiB,SAACf,GACd,EAAKA,MAAQA,GAhBH,KAkBd2K,SAAW,SAACxJ,GACR,EAAKA,MAAQA,GAnBH,KAqBdmK,aAAe,WACX,EAAKD,WAAY,GArBjBrD,YAAmB/I,MAEnBgJ,aACI,kBAAM,EAAK9G,SACX,SAAAA,GAEQA,EACA4J,OAAOC,aAAaO,QAAQ,MAAOpK,GAEnC4J,OAAOC,aAAaC,WAAW,WDE/C1F,UAAW,IAAIkF,EACfG,WAAY,IERZ,aAAe,IAAD,gCALdY,MAAe,CACXC,MAAM,EACN/J,KAAM,MAGI,KAIdgK,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAM9J,KAAOiK,GANR,KASdd,WAAa,WACT,EAAKW,MAAMC,MAAO,EAClB,EAAKD,MAAM9J,KAAO,MAVlBsG,YAAmB/I,OFQvB2M,aAAc,IAAI3C,EAClB4C,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfpL,EAAMqJ,cAAclF,mBACpB,EAAK+G,eAAgB,IAAIG,KACpBC,QAAQ3M,oBAAkDyM,EAAY,CACnEG,mBAAoB,kCAAMvL,EAAM0E,UAAU5C,YAAtB,aAAM,EAAsBxB,SAEnDkL,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cACAW,QACAC,OAAM,SAAA3M,GAAK,OAAI6G,QAAQC,IAAI,yCAA2C9G,MAE3E,EAAK+L,cAAca,GAAG,gBAAgB,SAACd,GAEnC9E,aAAY,WAER8E,EAASrF,SAAQ,SAAAoG,GAAO,OAAIA,EAAQC,UAAY,IAAI9G,KAAK6G,EAAQC,UAAY,QAC7E,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrC7F,aAAY,WACR6F,EAAQC,UAAY,IAAI9G,KAAK6G,EAAQC,WAErC,EAAKhB,SAASiB,QAAQF,WA/BxB,KAoCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OACfN,OAAM,SAAA3M,GAAK,OAAI6G,QAAQC,IAAI,qCAAuC9G,OAtC7D,KAwCdkN,cAAgB,WACZlG,aAAY,kBAAM,EAAK8E,SAAW,OAzCxB,KA2CdqB,WA3Cc,uCA2CD,WAAO1E,GAAP,eAAA7I,EAAA,6DACT6I,EAAOwD,WAAapL,EAAMqJ,cAAclF,iBAAkB7C,GADjD,4BAIC,EAAK4J,qBAJN,aAIC,EAAoBqB,OAAO,cAAe3E,GAJ3C,uDAML5B,QAAQC,IAAR,MANK,yDA3CC,sDACVkB,YAAmB/I,QHgBdoO,EAAeC,wBAAczM,GAEnC,SAAS0M,IACZ,OAAOC,qBAAWH,G,WIxBPI,eAAS,WACpB,MAAoCF,IAA7BhI,UAAY5C,EAAnB,EAAmBA,KAAMmI,EAAzB,EAAyBA,OACzB,OACI,cAAC4C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAACC,YAAa,UADhE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAc9C,KAAK,eAC9C,cAACuC,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAU9C,KAAK,gBAC1C,cAACuC,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASC,GAAG,kBAAkBQ,UAAQ,EAAC9C,QAAQ,sBAE/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJzL,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,QAAS,mBAAoBkK,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAErM,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,YAA1C,SACI,eAACqK,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMhB,GAAE,0BAActL,QAAd,IAAcA,OAAd,EAAcA,EAAMM,UAChC+L,KAAK,aACLE,KAAK,SACpB,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAASrE,EACTkE,KAAK,UACLE,KAAK,0B,4DChBjC,SAASE,EAAYC,GAEhC,MAAsBC,YAASD,EAAMlE,MAArC,mBAAOoE,EAAP,KAAcC,EAAd,KACA,OAEI,cADA,CACCC,EAAA,EAAKC,MAAN,CAAY1P,MAAOwP,EAAKG,WAAcH,EAAKxP,MAA3C,UACI,gCAAQqP,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKxP,MAClB,cAAC6P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKxP,QAC/B,QChBDyN,oBAAS,WACpB,IAAOlI,EAAagI,IAAbhI,UAEP,OACI,cAAC,IAAD,CACIyK,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIlQ,MAAO,MACjDmQ,SAAU,SAAC1H,EAAD,OAAU2H,EAAV,EAAUA,UAAV,OAAyB7K,EAAU7C,MAAM+F,GAAQkE,OAAM,SAAA3M,GAAK,OAClEoQ,EAAU,CAACpQ,MAAO,kCAH1B,SAMK,gBAAEqQ,EAAF,EAAEA,aAAc/P,EAAhB,EAAgBA,OAAhB,OACG,eAAC,IAAD,CAAMgQ,UAAU,UAAhB,UACI,cAACC,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAQ,wBAAwBoE,MAAM,OAAOS,UAAU,WACvE,cAACpB,EAAD,CAAajE,KAAK,QAAQsF,YAAY,QAAQC,WAAW,IACzD,cAACtB,EAAD,CAAajE,KAAK,WAAWsF,YAAY,WAAWE,KAAK,aACzD,cAAC,IAAD,CACIxF,KAAK,QACLyF,OAAQ,kBACJ,cAACf,EAAA,EAAD,CAAOvB,MAAO,CAACuC,aAAc,IAAKf,OAAK,EAACC,MAAM,MAAMpE,QAASrL,EAAON,WAG5E,cAACwO,EAAA,EAAD,CAAQtJ,QAASmL,EAAc5B,UAAQ,EAAC9C,QAAQ,QAAQgF,KAAK,SAASG,OAAK,a,mBCrBhF,SAASC,GAAT,GAA4C,IAAjBzQ,EAAgB,EAAhBA,OACtC,OACI,cAAC0Q,GAAA,EAAD,CAAShR,OAAK,EAAd,SACKM,GACG,cAAC0Q,GAAA,EAAQC,KAAT,UACK3Q,EAAO4Q,KAAI,SAACC,EAAU/G,GAAX,OACR,cAAC4G,GAAA,EAAQlD,KAAT,UAAuBqD,GAAJ/G,UCJ5BqD,oBAAS,WACpB,IAAOlI,EAAagI,IAAbhI,UAEP,OACI,cAAC,IAAD,CACIyK,cAAe,CAAEvL,YAAa,GAAIxB,SAAU,GAAIgN,MAAO,GAAIC,SAAU,GAAIlQ,MAAO,MAChFmQ,SAAU,SAAC1H,EAAD,OAAU2H,EAAV,EAAUA,UAAV,OAAyB7K,EAAU3C,SAAS6F,GAAQkE,OAAM,SAAA3M,GAAK,OAAIoQ,EAAU,CAACpQ,cACxFoR,iBAAkBC,KAAW,CACzB5M,YAAa4M,OAAaC,WAC1BrO,SAAUoO,OAAaC,WACvBrB,MAAOoB,OAAaC,WAAWrB,QAC/BC,SAAUmB,OAAaC,aAP/B,SAUK,gBAAEC,EAAF,EAAEA,aAAclB,EAAhB,EAAgBA,aAAc/P,EAA9B,EAA8BA,OAAQkR,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,IAAD,CAAMnB,UAAU,gBAAgBH,SAAUoB,EAAcG,aAAa,MAArE,UACI,cAACnB,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAQ,0BAA0BoE,MAAM,OAAOS,UAAU,WACzE,cAACpB,EAAD,CAAajE,KAAK,cAAcsF,YAAY,eAAeC,WAAW,IACtE,cAACtB,EAAD,CAAajE,KAAK,WAAWsF,YAAY,aACzC,cAACrB,EAAD,CAAajE,KAAK,QAAQsF,YAAY,UACtC,cAACrB,EAAD,CAAajE,KAAK,WAAWsF,YAAY,WAAWE,KAAK,aACzD,cAAC,IAAD,CAAcxF,KAAK,QACLyF,OAAQ,kBAAM,cAACG,GAAD,CAAkBzQ,OAAQA,EAAON,WAE7D,cAACwO,EAAA,EAAD,CAAQtJ,QAASmL,EAAc5B,UAAQ,EAAC9C,QAAQ,WAAWgF,KAAK,SAASG,OAAK,EACtEa,SAAUtB,IAAiBoB,IAAUD,aC1BlD/D,gBAAS,WAEpB,MAAiCF,IAAzBhI,EAAR,EAAQA,UAAWqF,EAAnB,EAAmBA,WACnB,OACI,cAACgH,EAAA,EAAD,CAASjE,UAAQ,EAAC6C,UAAU,SAASqB,UAAQ,EAACvB,UAAU,WAAxD,SACI,eAACzC,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACuB,EAAA,EAAD,CAAQxC,GAAG,KAAX,UACI,cAACY,EAAA,EAAD,CAAOmD,KAAK,UAAU1D,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAACuC,aAAc,MADlF,kBAICtL,EAAUwM,WACP,qCACI,cAACxB,EAAA,EAAD,CAAQxC,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,4BACjC,cAAC6C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAc6D,KAAK,OAAOnE,UAAQ,EAAvD,kCAKJ,qCACI,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWc,UAAU,cAAC,GAAD,MAAgBoG,KAAK,OAAOnE,UAAQ,EAAhF,qBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWc,UAAU,cAAC,GAAD,MAAmBoG,KAAK,OAAOnE,UAAQ,EAAnF,kCCxBT,SAASqE,KACpB,IACA,EAA4BC,mBAAS,MAArC,mBAAO3R,EAAP,KAAe8P,EAAf,KA0BA,OACI,qCACI,cAACG,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAQ,yBACxB,cAACiG,EAAA,EAAD,UACI,eAACpD,EAAA,EAAO0D,MAAR,CAAcC,OAAO,IAArB,UACI,cAAC3D,EAAA,EAAD,CAAQW,QA7BxB,WACI9P,IAAMmC,IAAI4Q,uBAA6BzF,OAAM,SAAAwE,GAAG,OAAItK,QAAQC,IAAIqK,EAAIzR,cA4BvBiM,QAAQ,YAAYmE,OAAK,EAACuC,SAAO,IAClE,cAAC7D,EAAA,EAAD,CAAQW,QA1BxB,WACI9P,IAAMmC,IAAI4Q,yBAA+BzF,OAAM,SAAAwE,GAAG,OAAItK,QAAQC,IAAIqK,EAAIzR,cAyBvBiM,QAAQ,cAAcmE,OAAK,EAACuC,SAAO,IACtE,cAAC7D,EAAA,EAAD,CAAQW,QAXxB,WACI9P,IAAMsC,KAAKyQ,iBAAwB,IAAIzF,OAAM,SAAAwE,GAAG,OAAIf,EAAUe,OAUVxF,QAAQ,mBAAmBmE,OAAK,EAACuC,SAAO,IAChF,cAAC7D,EAAA,EAAD,CAAQW,QAxBxB,WACI9P,IAAMmC,IAAI4Q,0BAAgCzF,OAAM,SAAAwE,GAAG,OAAItK,QAAQC,IAAIqK,EAAIzR,cAuBvBiM,QAAQ,eAAemE,OAAK,EAACuC,SAAO,IACxE,cAAC7D,EAAA,EAAD,CAAQW,QArBxB,WACI9P,IAAMmC,IAAI4Q,0BAAgCzF,OAAM,SAAAwE,GAAG,OAAItK,QAAQC,IAAIqK,EAAIzR,cAoBtBiM,QAAQ,eAAemE,OAAK,EAACuC,SAAO,IACzE,cAAC7D,EAAA,EAAD,CAAQW,QAlBxB,WACI9P,IAAMmC,IAAI4Q,2BAAiCzF,OAAM,SAAAwE,GAAG,OAAItK,QAAQC,IAAIqK,OAiBxBxF,QAAQ,WAAWmE,OAAK,EAACuC,SAAO,SAGvE/R,GACG,cAACyQ,GAAD,CAAkBzQ,OAAQA,OC3C3BmN,oBAAS,WAAwB,IAAD,IACpC3M,EAAeyM,IAAfzM,YACP,OACI,eAAC+M,EAAA,EAAD,WACI,cAAC0C,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAQ,iBACxB,cAAC4E,EAAA,EAAD,CAAQ+B,KAAG,EAACvE,GAAG,KAAKgC,MAAM,MAAMpE,QAAO,UAAE7K,EAAYd,aAAd,aAAE,EAAmBuS,WAC3D,UAAAzR,EAAYd,aAAZ,eAAmBkC,UAChB,eAAC0P,EAAA,EAAD,WACI,cAACrB,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAQ,cAAcoE,MAAM,SAC5C,sBAAMzB,MAAO,CAACkE,UAAW,QAAzB,SAAmC1R,EAAYd,MAAMkC,mB,SCV1D,SAASuQ,KACpB,OACI,eAACb,EAAA,EAAD,CAASnB,aAAW,EAApB,UACI,eAACF,EAAA,EAAD,CAAQrB,MAAI,EAAZ,UACI,cAACwD,GAAA,EAAD,CAAMvH,KAAK,WADf,6DAIA,cAACyG,EAAA,EAAQe,OAAT,UACI,cAACnE,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcoE,SAAO,EAA1C,4C,uDCND5E,gBAAS,WACpB,MAAmDF,IAA5CrD,cAAgBxG,EAAvB,EAAuBA,UAAW4C,EAAlC,EAAkCA,aAClC,OACI,qCACI,eAACoH,EAAA,EAAD,CAAMmE,UAAQ,EAACC,KAAK,QAAQxD,MAAO,CAACsE,MAAO,OAAQJ,UAAW,IAA9D,UACI,cAACjC,EAAA,EAAD,CAAQrB,KAAK,SAAS2D,UAAQ,EAAC9C,MAAM,OAAOpE,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACRmH,OAAQpP,EAAUqP,IAAI,OACtB5D,QAAS,kBAAM7I,EAAa,MAAO,WAEvC,cAACoH,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRmH,OAAQpP,EAAUqP,IAAI,WACtB5D,QAAS,kBAAM7I,EAAa,UAAW,WAE3C,cAACoH,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRmH,OAAQpP,EAAUqP,IAAI,UACtB5D,QAAS,kBAAM7I,EAAa,SAAU,cAG9C,cAACiK,EAAA,EAAD,IACA,cAAC,KAAD,CACIyC,SAAU,SAAC7O,GAAD,OAAgBmC,EAAa,YAAanC,IACpDoC,MAAO7C,EAAUlC,IAAI,cAAgB,IAAIwE,a,kDCpB1CyH,gBAAS,YAAyC,IAAD,EAAjB1K,EAAiB,EAAjBA,QAC3C,EAA8DwK,IAAvDhI,EAAP,EAAOA,UAAP,IAAkBqG,aAAe1G,EAAjC,EAAiCA,QAASlC,EAA1C,EAA0CA,gBAE1C,IAAI,UAAAuC,EAAU5C,YAAV,eAAgBM,YAAaF,EAAQE,SAAU,OAAO,KAO1D,OACI,eAACgQ,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC9E,MAAO,CAACsE,MAAO,QAAvC,SACI,cAACpE,EAAA,EAAD,CACIsC,OAAK,EACLf,MAAM,OACNpE,QAAS5I,EAAQ+E,UAAY,YAAc,oBAGnD,cAACmL,GAAA,EAAOE,QAAR,CAAgBE,QAAM,EAAC/E,MAAO,CAACsE,MAAO,QAAtC,SACI,cAACpE,EAAA,EAAD,CACQsC,OAAK,EACLhB,OAAK,EACLC,MAAOhN,EAAQ+E,UAAY,MAAQ,QACnC6D,QAAS5I,EAAQ+E,UAAY,WAAa,SAC1C5C,QAASA,EACTiK,QAAS,SAACmE,GAAD,OArB7B,SAAsBA,EAAmBrQ,GACrCqQ,EAAEC,iBACFvQ,EAAgBC,GAAWF,EAAQ+E,WAmBH0L,CAAaF,EAAGvQ,EAAQE,qBC1BjDwK,gBAAS,YAAwC,IAAlB1K,EAAiB,EAAjBA,QAO1C,OACI,eAAC0Q,GAAA,EAAD,CAAM1F,GAAIkB,IAAMhB,GAAE,mBAAclL,EAAQE,UAAxC,UACI,cAAC0L,EAAA,EAAD,CAAOP,IAAKrL,EAAQ2B,OAAS,qBAC7B,eAAC+O,GAAA,EAAKN,QAAN,WACI,cAACM,GAAA,EAAKlD,OAAN,UAAcxN,EAAQ0B,cACtB,cAACgP,GAAA,EAAKC,YAAN,UAXZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAItJ,OAAS,GAAKsJ,EAAIC,UAAU,EAAG,IAAM,MAAQD,EASjCE,CAAS9Q,EAAQ6B,UAExC,eAAC6O,GAAA,EAAKN,QAAN,CAAcW,OAAK,EAAnB,UACI,cAACpB,GAAA,EAAD,CAAMvH,KAAK,SACVpI,EAAQgF,eAFb,IAEyD,IAA3BhF,EAAQgF,eAAuB,WAAa,eAE1E,cAAC,GAAD,CAAchF,QAASA,UClBpB0K,gBAAS,YAAsD,IAAnBhI,EAAkB,EAAlBA,UACjDsO,EAAiB,CACnBC,YAAa,SACbC,YAAa,GAEjB,OACI,cAAChD,GAAA,EAAD,CAAMiD,YAAU,EAAhB,SACKzO,EAAUyL,KAAI,SAAAhK,GAAQ,OACf,cAACiN,GAAA,EAAD,CACIC,WAAS,EAETC,QACA,cAACpD,GAAA,EAAKnD,KAAN,CAAmCC,GAAIkB,IAAMhB,GAAE,kBAAa/G,EAASjE,UAArE,SACI,cAAC0L,EAAA,EAAD,CACImD,KAAK,OACLwC,UAAQ,EACRlG,IAAKlH,EAASxC,OAAS,mBACvB4J,MAAOpH,EAASY,UAAYiM,EAAiB,QALrC7M,EAASjE,UAJ7B,SAcI,cAACkR,GAAA,EAAMhB,QAAP,UACI,cAAC,GAAD,CAAapQ,QAASmE,OAbrBA,EAASjE,kBCVvB,SAASsR,GAAT,GAA8C,IAAD,MAAlBlS,EAAkB,EAAlBA,SAEtC,OACI,eAACuP,EAAA,EAAQM,MAAT,CAAe5B,UAAU,oBAAzB,UACI,eAACsB,EAAA,EAAD,WACKvP,EAASsF,aACN,cAACkI,EAAA,EAAD,CAAOgD,SAAS,MAAM9C,MAAM,MAAMpE,QAAQ,YAAY2C,MAAO,CAACkC,UAAW,YAE7E,cAAC1C,GAAA,EAAKoE,MAAN,UACI,eAACpE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYmD,KAAK,OAAOwC,UAAQ,EAAClG,KAAK,UAAA/L,EAASyD,YAAT,eAAepB,QAAS,mBAAoB4J,MAAO,CAACuC,aAAc,KACxG,eAAC/C,GAAA,EAAKqF,QAAN,WACI,cAACrF,GAAA,EAAKyC,OAAN,CAAaxC,GAAIkB,IAAMhB,GAAE,sBAAiB5L,EAASF,IAAnD,SAA0DE,EAAS6B,QACnE,eAAC4J,GAAA,EAAK4F,YAAN,wBACc,cAAC,IAAD,CAAMzF,GAAE,6BAAc5L,EAASyD,YAAvB,aAAc,EAAe7C,UAArC,mBAAkDZ,EAASyD,YAA3D,aAAkD,EAAerB,iBAE9EpC,EAASuD,QACN,cAACkI,GAAA,EAAK4F,YAAN,UACI,cAAC7D,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,SAAnB,6CAKP1N,EAASmD,UAA+B,IAApBnD,EAASuD,QAC1B,cAACkI,GAAA,EAAK4F,YAAN,UACI,cAAC7D,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,QAAnB,yDASxB,cAAC6B,EAAA,EAAD,UACI,iCACI,cAACc,GAAA,EAAD,CAAMvH,KAAK,UADf,IAC2BnC,kBAAO3G,EAAS8B,KAAO,qBAC9C,cAACuO,GAAA,EAAD,CAAMvH,KAAK,WAFf,IAE2B9I,EAASkC,WAGxC,cAACqN,EAAA,EAAD,CAAS4C,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0B/O,UAAWpD,EAASoD,cAElD,eAACmM,EAAA,EAAD,CAAS6C,UAAQ,EAAjB,UACI,+BAAOpS,EAAS+B,cAChB,cAACoK,EAAA,EAAD,CACIT,GAAIkB,IACJhB,GAAE,sBAAiB5L,EAASF,IAC5B4N,MAAM,OACN2E,QAAQ,QACR/I,QAAQ,eCtDb8B,oBAAS,WAEpB,IACOkH,EADiBpH,IAAjBrD,cACAyK,kBAGP,OACI,mCACKA,EAAkBzD,KAAI,mCAAE0D,EAAF,KAAS9P,EAAT,YACnB,eAAC,WAAD,WACI,cAACyL,EAAA,EAAD,CAAQ+B,KAAG,EAACvC,MAAM,OAAlB,SACK6E,IAGJ9P,EAAWoM,KAAI,SAAA7O,GAAQ,OACpB,cAACkS,GAAD,CAAoClS,SAAUA,GAAvBA,EAASF,SANzByS,W,UCZhB,SAASC,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAahE,OAAK,EAACxC,MAAO,CAAEkE,UAAW,IAAvC,SACI,eAACZ,EAAA,EAAQM,MAAT,WACI,cAACN,EAAA,EAAD,CAAStD,MAAO,CAAEyG,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYvE,OAAb,CAAoB7L,OAAK,EAAzB,UACI,cAACoQ,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACpD,EAAA,EAAD,UACI,eAACkD,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACpD,EAAA,EAAD,CAAS4C,WAAS,EAAClG,MAAO,CAAEyG,UAAW,MACvC,cAACnD,EAAA,EAAD,CAAS6C,UAAQ,EAAjB,SACI,cAACjG,EAAA,EAAD,CAAQmD,UAAQ,EAAC5B,MAAM,OAAO2E,QAAQ,QAAQ/I,QAAQ,kBChB/D8B,oBAAS,WAEpB,IAAOvD,EAAiBqD,IAAjBrD,cACAxD,EAA2EwD,EAA3ExD,eAAgB5B,EAA2DoF,EAA3DpF,WAAYoB,EAA+CgE,EAA/ChE,gBAAiBlH,EAA8BkL,EAA9BlL,WAAYmG,EAAkB+E,EAAlB/E,eAChE,EAAsC8M,oBAAS,GAA/C,mBAAOiD,EAAP,KAAoBC,EAApB,KAcA,OAJAC,qBAAU,WACFtQ,EAAWgN,MAAQ,GAAGpL,MAC3B,CAAC5B,EAAWgN,KAAMpL,IAGjB,eAAC2O,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAM,KAAnB,SACKzN,IAAmB+P,EAChB,qCACI,cAACL,GAAD,IACA,cAACA,GAAD,IACA,cAACA,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,KAAD,CACIU,UAAW,EACXC,SAzBpB,WACIL,GAAe,GACfjP,EAAgB,IAAIhH,EAAaF,EAAYyW,YAAc,IAC3D/O,IAAiBjF,MAAK,kBAAM0T,GAAe,OAuB3BO,SAAUR,KAAiBlW,GAAcA,EAAWyW,YAAczW,EAAW2W,WAE7EC,aAAa,EALjB,SAOA,cAAC,GAAD,QAIR,cAACP,GAAA,EAAKC,OAAN,CAAa1C,MAAM,IAAnB,SACI,cAAC,GAAD,MAEJ,cAACyC,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,cAACiD,GAAA,EAAD,CAAQ/C,OAAQoC,Y,UChDjB,SAASY,GAAT,GAAwE,IAAD,IAApDnI,gBAAoD,aAAnChC,eAAmC,MAAzB,aAAyB,EAClF,OACI,cAACoK,GAAA,EAAD,CAAQjD,QAAQ,EAAOnF,SAAUA,EAAjC,SACI,cAACkI,GAAA,EAAD,CAAQlK,QAASA,M,wBCId8B,gBAAS,YAAoD,IAArBxB,EAAoB,EAApBA,WAC5CJ,EAAgB0B,IAAhB1B,aAWP,OATAuJ,qBAAU,WAIN,OAHInJ,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,gBACbrB,EAAamB,uBAElB,CAACnB,EAAcI,IAEd,qCACI,cAAC2F,EAAA,EAAD,CACIpB,UAAU,SACVqC,SAAS,MACTlF,UAAQ,EACRoC,MAAM,OACNzB,MAAO,CAAC0H,OAAQ,QALpB,SAOI,cAACzF,EAAA,EAAD,sCAEJ,cAACqB,EAAA,EAAD,CAASiB,UAAQ,EAAC4B,UAAQ,EAA1B,SACI,eAACwB,GAAA,EAAQ/D,MAAT,WACI,cAAC,IAAD,CAAQ/B,SAAU,SAAC1H,EAAD,OAAUyN,EAAV,EAAUA,UAAV,OAAyBrK,EAAasB,WAAW1E,GAAgChH,MAAK,kBAAMyU,QACtGlG,cAAe,CAACtO,KAAM,IACtB0P,iBAAkB+E,KAAW,CACzBzU,KAAMyU,OAAa7E,aAH/B,SAOS,gBAAEjB,EAAF,EAAEA,aAAcmB,EAAhB,EAAgBA,QAASD,EAAzB,EAAyBA,aAAzB,OACG,cAAC,IAAD,CAAMjB,UAAU,UAAhB,SAEI,cAAC,IAAD,CAAOnF,KAAK,OAAZ,SACK,SAACkE,GAAD,OACG,sBAAKf,MAAO,CAAEI,SAAU,YAAxB,UACI,cAACmH,GAAA,EAAD,CAAQ/C,OAAQzC,IAChB,kDACII,YAAY,mEACZ2F,KAAM,GACF/G,EAAME,OAHd,IAII8G,WAAY,SAAA/C,GACM,UAAVA,EAAE3S,KAAmB2S,EAAEgD,UAGb,UAAVhD,EAAE3S,KAAoB2S,EAAEgD,WACxBhD,EAAEC,iBACF/B,GAAWD,oBAYjD1F,EAAaC,SAASoF,KAAI,SAACrE,GAAD,OACxB,eAACoJ,GAAA,EAAD,WACI,cAACA,GAAA,EAAQM,OAAT,CAAgBnI,IAAKvB,EAAQnI,OAAS,qBACtC,eAACuR,GAAA,EAAQ9C,QAAT,WACKtG,EAAQ2J,WAED,cAACP,GAAA,EAAQQ,OAAT,CAAgB1I,GAAIkB,IAAMhB,GAAE,mBAAcpB,EAAQ2J,YAAlD,SACK3J,EAAQ6J,oBAGb,cAACT,GAAA,EAAQQ,OAAT,CAAgBnI,MAAO,CAACqI,UAAW,SAAU5G,MAAO,QAApD,0BAIR,cAACkG,GAAA,EAAQW,SAAT,UACI,8BAAMC,aAAoBhK,EAAQC,eAEtC,cAACmJ,GAAA,EAAQa,KAAT,CAAcxI,MAAO,CAACyI,WAAY,YAAlC,SAAgDlK,EAAQnL,YAhBlDmL,EAAQ1K,kBC5EjC6U,GAAa,cACbC,GAAiBD,oBCOxBE,GAAqB,CACvBC,OAAQ,mBAGNC,GAAyB,CAC3B1I,SAAU,WACV2I,OAAQ,KACRC,KAAM,KACN1E,MAAO,OACP2E,OAAQ,OACRxH,MAAO,SAOItC,gBAAU,YAAoD,IAAD,IAAlBpL,EAAkB,EAAlBA,SACtD,EAA2EkL,IAApErD,cAAgB5C,EAAvB,EAAuBA,iBAAkBpC,EAAzC,EAAyCA,QAASwC,EAAlD,EAAkDA,qBAClD,OACI,eAACkK,EAAA,EAAQM,MAAT,WACK7P,EAASsF,aACN,cAACkI,EAAA,EAAD,CAAO2H,QAAM,EAACzH,MAAM,MAAMpE,QAAQ,YAAY2C,MAAO,CAACI,SAAU,YAAa+I,OAAQ,IAC9EH,MAAO,GAAII,IAAK,MAE3B,eAAC9F,EAAA,EAAD,CAAS9B,OAAK,EAAC+C,SAAS,MAAMvE,MAAO,CAACqJ,QAAS,KAA/C,UACI,cAAChJ,EAAA,EAAD,CAAOP,IAAG,iCAA4B/L,EAASgC,SAArC,QAAqDyM,OAAK,EAACxC,MAAO4I,KAC5E,cAACtF,EAAA,EAAD,CAAStD,MAAO8I,GAAwBtH,OAAK,EAA7C,SACI,cAAChC,GAAA,EAAKoE,MAAN,UACI,cAACpE,GAAA,EAAD,UAEI,eAACA,GAAA,EAAKqF,QAAN,WACI,cAAC5C,EAAA,EAAD,CACIuB,KAAK,OACLnG,QAAStJ,EAAS6B,MAClBoK,MAAO,CAACyB,MAAO,WAEnB,4BAAI/G,kBAAO3G,EAAS8B,KAAO6S,MAC3B,0CAEI,iCACI,cAAC,IAAD,CAAM/I,GAAE,6BAAc5L,EAASyD,YAAvB,aAAc,EAAe7C,UAArC,mBACKZ,EAASyD,YADd,aACK,EAAerB,+BAShD,cAACmN,EAAA,EAAD,CAAS6C,UAAQ,EAAC5B,SAAS,SAA3B,SACKxQ,EAASuD,OACN,qCACI,cAAC4I,EAAA,EAAD,CAAQuB,MAAO1N,EAASsF,YAAc,QAAU,MACxCgE,QAAStJ,EAASsF,YAAc,uBAAyB,kBACzD+M,QAAQ,OAAO5E,OAAK,EAACX,QAASzH,EAAsBxC,QAASA,IAErE,cAACsJ,EAAA,EAAD,CAAQmD,SAAUtP,EAASsF,YAAaoG,GAAIkB,IAAMhB,GAAE,kBAAa5L,EAASF,IAAK4N,MAAM,SAAS2E,QAAQ,QAAtG,6BAIJrS,EAASmD,QACT,cAACgJ,EAAA,EAAD,CAAQmD,SAAUtP,EAASsF,YAAawH,QAAS7H,EAAkBpC,QAASA,EAA5E,+BAEA,cAACsJ,EAAA,EAAD,CAAQmD,SAAUtP,EAASsF,YAAawH,QAAS7H,EAAkBpC,QAASA,EAAS6K,MAAM,OAA3F,mCC9DLtC,gBAAS,YAAkD,IAAnBpL,EAAkB,EAAlBA,SACnD,OACI,eAACuP,EAAA,EAAQM,MAAT,WACI,cAACN,EAAA,EAAD,CAASiB,SAAS,MAAlB,SACI,eAACwC,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,SACI,cAACF,GAAA,EAAD,CAAMZ,KAAK,QAAQ/B,MAAM,OAAO5E,KAAK,WAEzC,cAACkK,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,4BAAIvQ,EAAS+B,qBAIzB,cAACwN,EAAA,EAAD,CAASiB,UAAQ,EAAjB,SACI,eAACwC,GAAA,EAAD,CAAMuC,cAAc,SAApB,UACI,cAACvC,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,SACI,cAACF,GAAA,EAAD,CAAMvH,KAAK,WAAW2G,KAAK,QAAQ/B,MAAM,WAE7C,cAACsF,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACR,+BACK5J,kBAAO3G,EAAS8B,KAAO8S,aAK5B,cAACrF,EAAA,EAAD,CAASiB,UAAQ,EAAjB,SACI,eAACwC,GAAA,EAAD,CAAMuC,cAAc,SAApB,UACI,cAACvC,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,SACI,cAACF,GAAA,EAAD,CAAMvH,KAAK,SAAS2G,KAAK,QAAQ/B,MAAM,WAE3C,cAACsF,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,iCAAOvQ,EAASkC,MAAhB,KAAyBlC,EAASiC,qBCjC3CmJ,gBAAS,YAAwE,IAAD,IAApCpL,SAAWoD,EAAyB,EAAzBA,UAAWK,EAAc,EAAdA,KAC7E,OAAKL,EAED,qCACI,eAACmM,EAAA,EAAD,CACIpB,UAAU,SACVlC,MAAO,CAAE0H,OAAQ,QACjBnD,SAAS,MACT2B,WAAS,EACT7G,UAAQ,EACRoC,MAAM,OANV,UAQKtK,EAAU4E,OARf,IAQ6C,IAArB5E,EAAU4E,OAAe,SAAW,SAR5D,YAUA,cAACuH,EAAA,EAAD,CAASiB,UAAQ,EAAjB,SACI,cAAC5B,GAAA,EAAD,CAAM4G,SAAO,EAACC,SAAO,EAArB,SACKrS,EAAUyL,KAAI,SAAAhK,GAAQ,OACnB,eAAC4G,GAAA,EAAD,CAA8BQ,MAAO,CAAEI,SAAU,YAAjD,UACKxH,EAASjE,YAAT,OAAsB6C,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM7C,WACzB,cAAC4M,EAAA,EAAD,CACIvB,MAAO,CAAEI,SAAU,YACnBqB,MAAM,SACNyH,OAAO,QAHX,kBAOJ,cAAC7I,EAAA,EAAD,CAAOmD,KAAK,OAAO1D,IAAKlH,EAASxC,OAAS,qBAC1C,eAACoJ,GAAA,EAAKqF,QAAN,CAAcyE,cAAc,SAA5B,UACI,cAAC9J,GAAA,EAAKyC,OAAN,CAAaxC,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,mBAAc/G,EAASjE,UAA/B,SAA4CiE,EAASzC,gBAExDyC,EAASY,WACV,cAACgG,GAAA,EAAKiK,MAAN,CAAYzJ,MAAO,CAAEyB,MAAO,UAA5B,4BAfG7I,EAASjE,oBAhBjB,QCCZwK,gBAAS,WACpB,IAAOvD,EAAiBqD,IAAjBrD,cACkB7H,EAAiE6H,EAAnFlF,iBAA4B+B,EAAuDmD,EAAvDnD,aAAc5B,EAAyC+E,EAAzC/E,eAAgByC,EAAyBsC,EAAzBtC,sBAE1DzF,EAAM6V,cAAN7V,GAUP,OARAiT,qBAAU,WAGN,OAFIjT,GAAI4E,EAAa5E,GAEd,WACHyF,OAEa,CAACzF,EAAI4E,EAAca,IAEpCzC,IAAmB9C,EAAiB,cAACyT,GAAD,IAErC,eAACT,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBvQ,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsB4J,WAAU,OAAE5J,QAAF,IAAEA,OAAF,EAAEA,EAAUF,QAEhD,cAACkT,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,SACI,cAACqF,GAAD,CAAyB5V,SAAUA,Y,UC9BnCoL,gBAAS,WACpB,IAAO7C,EAAc2C,IAAd3C,WACP,OACI,cAACsN,GAAA,EAAD,CAAOzM,KAAMb,EAAWY,MAAMC,KAAM0M,QAASvN,EAAWC,WAAYiH,KAAK,OAAzE,SACI,cAACoG,GAAA,EAAM/E,QAAP,UACKvI,EAAWY,MAAM9J,Y,UCCnB,SAAS0W,GAAW/I,GAC/B,MAAsBC,YAASD,EAAMlE,MAArC,mBAAOoE,EAAP,KAAcC,EAAd,KACA,OAEI,cADA,CACCC,EAAA,EAAKC,MAAN,CAAY1P,MAAOwP,EAAKG,WAAcH,EAAKxP,MAA3C,UACI,gCAAQqP,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKxP,MAClB,cAAC6P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKxP,QAC/B,Q,cCTD,SAASqY,GAAkBhJ,GACtC,MAA+BC,YAASD,EAAMlE,MAA9C,mBAAOoE,EAAP,KAAcC,EAAd,KAAoB8I,EAApB,KACA,OAEI,cADA,CACC7I,EAAA,EAAKC,MAAN,CAAY1P,MAAOwP,EAAKG,WAAcH,EAAKxP,MAA3C,UACI,gCAAQqP,EAAMO,QACd,cAAC2I,GAAA,EAAD,CAAQC,WAAS,EACTC,QAASpJ,EAAMoJ,QACflS,MAAOgJ,EAAMhJ,OAAS,KACtByM,SAAU,SAAC0F,EAAO3Z,GAAR,OAAiBuZ,EAAQK,SAAS5Z,EAAKwH,QACjDqS,OAAQ,kBAAMN,EAAQO,YAAW,IACjCpI,YAAapB,EAAMoB,cAE1BjB,EAAKG,SAAWH,EAAKxP,MAClB,cAAC6P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKxP,QAC/B,QCzBT,IAAM8Y,GAAkB,CAC3B,CAAE9J,KAAM,SAAUzI,MAAO,UACzB,CAAEyI,KAAM,UAAWzI,MAAO,WAC1B,CAAEyI,KAAM,OAAQzI,MAAO,QACvB,CAAEyI,KAAM,OAAQzI,MAAO,QACvB,CAAEyI,KAAM,QAASzI,MAAO,SACxB,CAAEyI,KAAM,SAAUzI,MAAO,W,qBCDd,SAASwS,GAAY1J,GAChC,MAA+BC,YAASD,EAAMlE,MAA9C,mBAAOoE,EAAP,KAAcC,EAAd,KAAoB8I,EAApB,KACA,OAEI,cADA,CACC7I,EAAA,EAAKC,MAAN,CAAY1P,MAAOwP,EAAKG,WAAcH,EAAKxP,MAA3C,UACI,cAAC,KAAD,uCACQuP,GACAF,GAFR,IAGI2J,SAAWzJ,EAAMhJ,OAAS,IAAIP,KAAKuJ,EAAMhJ,QAAW,KACpDyM,SAAU,SAAAzM,GAAK,OAAI+R,EAAQK,SAASpS,OAEvCiJ,EAAKG,SAAWH,EAAKxP,MAClB,cAAC6P,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAKxP,QAC/B,QCCDyN,oBAAS,WAEpB,IAAMjN,EAAUyY,cACT/O,EAAiBqD,IAAjBrD,cACA/E,EAAgE+E,EAAhE/E,eAAgB8B,EAAgDiD,EAAhDjD,eAAgBE,EAAgC+C,EAAhC/C,eAAgBJ,EAAgBmD,EAAhBnD,aAChD5E,EAAM6V,cAAN7V,GACDiP,EAAmBC,KAAW,CAChCnN,MAAOmN,OAAaC,WACpBlN,YAAaiN,OAAaC,WAC1BjN,SAAUgN,OAAaC,WACvBnN,KAAMkN,OAAaC,SAAS,oBAAoB4H,WAChD3U,MAAO8M,OAAaC,WACpBhN,KAAM+M,OAAaC,aAGvB,EAAoDW,mBAA6B,IAAIjO,GAArF,mBAAOmV,EAAP,KAA2BC,EAA3B,KAuBA,OApBAhE,qBAAU,WAEFjT,GACA4E,EAAa5E,GAAIV,MAAK,SAAAY,GAAQ,OAAI+W,EAAsB,IAAIpV,EAAmB3B,SAEpF,CAACF,EAAI4E,IAeJ5B,EAAuB,cAAC2Q,GAAD,CAASnK,QAAQ,wBAGxC,eAACiG,EAAA,EAAD,CAAS6C,UAAQ,EAAjB,UACI,cAAClE,EAAA,EAAD,CAAQ5E,QAAQ,mBAAmB2G,KAAG,EAACvC,MAAM,SAC7C,cAAC,IAAD,CACIqB,iBAAkBA,EAClBpB,cAAemJ,EACfE,oBAAkB,EAClBlJ,SAAU,SAAA1H,GAAM,OAtB5B,SAA0BpG,GACtB,GAAIA,EAASF,GACTgF,EAAe9E,GAAUZ,MAAK,WAAQjB,EAAQC,KAAR,sBAA4B4B,EAASF,YAExE,CACH,IAAImX,EAAW,2BACRjX,GADQ,IAEXF,GAAIoX,iBAERtS,EAAeqS,GAAa7X,MAAK,WAAQjB,EAAQC,KAAR,sBAA4B6Y,EAAYnX,SAazDqX,CAAiB/Q,IAJzC,SAKK,gBAAG8I,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASnB,EAA1B,EAA0BA,aAAcoB,EAAxC,EAAwCA,MAAxC,OACG,eAAC,IAAD,CAAMnB,UAAU,UAAUH,SAAUoB,EAAcG,aAAa,MAA/D,UACI,cAACtC,EAAD,CAAaqB,YAAY,QAAQtF,KAAK,UACtC,cAACiN,GAAD,CAAYhC,KAAM,EAAG3F,YAAY,cAActF,KAAK,gBACpD,cAACkN,GAAD,CAAmBI,QAASK,GAAiBrI,YAAY,WAAWtF,KAAK,aACzE,cAAC4N,GAAD,CACIU,gBAAgB,OAChBtO,KAAK,OACLuO,gBAAc,EACdC,YAAY,OACZ3C,WAAYC,GACZ2C,WAAW,UAEf,cAACrJ,EAAA,EAAD,CAAQ5E,QAAQ,mBAAmB2G,KAAG,EAACvC,MAAM,SAC7C,cAACX,EAAD,CAAaqB,YAAY,OAAOtF,KAAK,SACrC,cAACiE,EAAD,CAAaqB,YAAY,QAAQtF,KAAK,UACtC,cAACqD,EAAA,EAAD,CACI7C,QAAQ,SACRzG,QAASmL,EACTqE,QAAQ,QACRjG,UAAQ,EAACkC,KAAK,SACdgB,SAAUtB,IAAiBoB,IAAUD,IAEzC,cAAChD,EAAA,EAAD,CAAQ7C,QAAQ,SAASoC,GAAIkB,IAAMhB,GAAG,cAAcyG,QAAQ,sB,UC7ErEjH,gBAAS,YAAyD,IAA/B1K,EAA8B,EAA9BA,QAAS8W,EAAqB,EAArBA,YACjC7P,EAAkBuD,IAAjC3B,aAAe5B,cACtB,OACI,cAAC,IAAD,CACIgG,cAAa,2BAAM,IAAIrL,EAAsB5B,IAAhC,IAA0C/C,MAAO,OAC9DmQ,SAAU,SAAC1H,GAAD,OAAYuB,EAAcvB,GAAQhH,MAAK,WAAQoY,GAAY,OACrEzI,iBAAkBC,KAAW,CACzB5M,YAAa4M,OAAaC,aAJlC,SAOK,gBAAEC,EAAF,EAAEA,aAAclB,EAAhB,EAAgBA,aAAc/P,EAA9B,EAA8BA,OAAQkR,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,IAAD,CAAMnB,UAAU,gBAAgBH,SAAUoB,EAAcG,aAAa,MAArE,UACI,cAACtC,EAAD,CAAajE,KAAK,cAAcsF,YAAY,eAAeC,WAAW,IACtE,cAAC0H,GAAD,CAAYhC,KAAM,EAAG3F,YAAY,eAAetF,KAAK,QACrD,cAAC,IAAD,CACIA,KAAK,QACLyF,OAAQ,kBACJ,cAACf,EAAA,EAAD,CAAOvB,MAAO,CAACuC,aAAc,IAAKf,OAAK,EAACC,MAAM,MAAMpE,QAASrL,EAAON,WAG5E,cAACwO,EAAA,EAAD,CAAQkG,QAAQ,QAAQxP,QAASmL,EAAc5B,UAAQ,EAAC9C,QAAQ,SAASgF,KAAK,iBACtEgB,SAAUtB,IAAiBoB,IAAUD,aCvBlD/D,gBAAS,YAAyC,IAAlB1K,EAAiB,EAAjBA,QAEpB+W,EAAmBvM,IAAlC3B,aAAekO,cACvB,EAA4B7H,oBAAS,GAArC,mBAAO8H,EAAP,KAAiBC,EAAjB,KAEA,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAAC7E,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,UACI,cAACrC,EAAA,EAAD,CAAQmE,QAAQ,OAAOxF,KAAK,OAAOvD,QAAO,gBAAW5I,EAAQ0B,eAC5DqV,GACG,cAACtL,EAAA,EAAD,CAAQkG,QAAQ,QACR5E,OAAK,EACLnE,QAASoO,EAAW,SAAW,eAC/B5K,QAAS,kBAAM6K,GAASD,SAGxC,cAAC1E,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACKmH,EACG,cAAC,GAAD,CAAYhX,QAASA,EAAS8W,YAAaG,IAE3C,sBAAM1L,MAAO,CAACyI,WAAY,YAA1B,SACKhU,EAAQ6B,gBCvBtB6I,gBAAS,YAAiD,IAAnBpL,EAAkB,EAAlBA,SAClD,OACI,eAACoR,GAAA,EAAD,CAAM1F,GAAIkB,IAAMhB,GAAE,sBAAiB5L,EAASF,IAA5C,UACI,cAACwM,EAAA,EAAD,CACIL,MAAO,CAAEyG,UAAW,IAAKoF,SAAU,SACnC/L,IAAK,iCAA0B/L,EAASgC,SAAnC,UAAqD,IAE9D,eAACoP,GAAA,EAAKN,QAAN,WACI,cAACM,GAAA,EAAKlD,OAAN,CAAaC,UAAU,SAAvB,SAAiCnO,EAAS6B,QAC1C,eAACuP,GAAA,EAAK2G,KAAN,CAAW5J,UAAU,SAArB,UACI,8BAAMxH,kBAAO,IAAIhD,KAAK3D,EAAS8B,MAAO,YACtC,8BAAM6E,kBAAO,IAAIhD,KAAK3D,EAAS8B,MAAO,uBCP3CsJ,gBAAS,YAA8C,IAAlB1K,EAAiB,EAAjBA,QAChD,EAAwEwK,IAAjE3B,aAAe9G,EAAtB,EAAsBA,WAAY0E,EAAlC,EAAkCA,kBAAmB9C,EAArD,EAAqDA,eAC/C2T,EAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE5Z,IAAK,WAC1C,CAAE2Z,SAAU,cAAeC,KAAM,CAAE5Z,IAAK,SACxC,CAAE2Z,SAAU,iBAAkBC,KAAM,CAAE5Z,IAAK,aAS/C,OAPAyU,qBAAU,WACN1O,EAAe3D,EAAQE,YACxB,CAACyD,EAAgB3D,IAOhB,cAACkX,GAAA,EAAIC,KAAL,CAAUhV,QAASsE,EAAnB,SACI,eAAC6L,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACA,cAACrC,EAAA,EAAD,CAAQmE,QAAQ,OAAOxF,KAAK,WAAWvD,QAAO,iBAE9C,eAAC0J,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,UACI,cAACqH,GAAA,EAAD,CACIO,KAAM,CAAChG,WAAW,EAAMzF,UAAU,GAClCsL,MAAOA,EACPI,YAAa,SAACnH,EAAGvU,GAAJ,OAdjC,SAAyBuU,EAAmBvU,GACxC2H,EAAe3D,EAAQE,SAAUoX,EAAMtb,EAAK2b,aAAuBH,KAAK5Z,KAa9Bga,CAAgBrH,EAAGvU,MAEjD,uBACA,cAAC0U,GAAA,EAAKvB,MAAN,CAAY0I,YAAa,EAAzB,SACK9V,EAAWoM,KAAI,SAAAtR,GACZ,OAAO,cAAC,GAAD,CAAgCyC,SAAUzC,GAAhBA,EAAEuC,oBCvChDsL,gBAAS,WACpB,IAEIoN,EAFGjP,EAAgB2B,IAAhB3B,aACA7I,EAAqD6I,EAArD7I,QAASmG,EAA4C0C,EAA5C1C,WAAYE,EAAgCwC,EAAhCxC,kBAAmBK,EAAamC,EAAbnC,UAQ/C,OANkB,IAAdA,IACAoR,EAAa,kCAAuB9X,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAS0B,cAE/B,IAAdgF,IACAoR,EAAa,wBAAa9X,QAAb,IAAaA,OAAb,EAAaA,EAAS0B,YAAtB,kBAGb,cAACwV,GAAA,EAAIC,KAAL,CAAUhV,QAASkE,EAAnB,SACI,eAACiM,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,cAACrC,EAAA,EAAD,CACImE,QAAQ,OACRxF,KAAK,OACLvD,QAASkP,MAGjB,cAACxF,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,cAACa,GAAA,EAAKvB,MAAN,CAAY0I,YAAa,EAAzB,SACK1R,EAAWgI,KAAI,SAAAnO,GACZ,OAAO,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQE,yB,iBCpB9C,SAAS6X,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,aAEpD,OAKI,aAJA,CAIC,KAAD,CACI5M,IAAK4M,EACL1M,MAAO,CAACiJ,OAAQ,IAAK3E,MAAO,QAC5BqI,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,iBACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIV,EAAWU,M,cCjBlC,SAASC,GAAT,GAAgD,IAAlBC,EAAiB,EAAjBA,SAEnCC,EAAU,CACZ5F,OAAQ,kBACRhC,YAAa,OACb6H,aAAc,MACdC,WAAY,OACZtL,UAAW,SACX+G,OAAQ,KAKNwE,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAc/K,KAAI,SAAC/N,GAAD,OAAeW,OAAOC,OAAOZ,EAAM,CAAEgY,QAASe,IAAIC,gBAAgBhZ,WAC9F,CAACwY,IACJ,EAAoDS,aAAY,CAACL,WAA1DM,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACI,gDAASF,KAAT,IAAyB/N,MAAOiO,EAAY,2BAAOX,GATjC,CAClB5H,YAAa,UAQmE4H,EAAhF,UACI,qCAAWU,MACX,cAAC5J,GAAA,EAAD,CAAMvH,KAAK,SAAS2G,KAAK,SACzB,cAACvB,EAAA,EAAD,CAAQ5E,QAAQ,wBCjBb,SAAS6Q,GAAT,GAA2D,IAA/BtX,EAA8B,EAA9BA,QAAShC,EAAqB,EAArBA,YAEhD,EAA0B+O,mBAAmB,IAA7C,mBAAOwK,EAAP,KAAcd,EAAd,KACA,EAA8B1J,qBAA9B,mBAAOwJ,EAAP,KAAgBV,EAAhB,KAkBA,OAPA3F,qBAAU,WAEN,OAAO,WACHqH,EAAMhW,SAAQ,SAACtD,GAAD,OAAkB+Y,IAAIQ,gBAAgBvZ,EAAKgY,eAE9D,CAACsB,IAGA,eAACpH,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,UACI,cAACrC,EAAA,EAAD,CAAQR,MAAM,OAAOpE,QAAQ,qBAAqB2G,KAAG,IACrD,cAACoJ,GAAD,CAAqBC,SAAUA,OAEnC,cAACtG,GAAA,EAAKC,OAAN,CAAa1C,MAAO,IACpB,eAACyC,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,UACI,cAACrC,EAAA,EAAD,CAAQR,MAAM,OAAOpE,QAAQ,wBAAwB2G,KAAG,IACvDmK,EAAMpS,OAAS,GACZ,cAACyQ,GAAD,CAAoBC,WAAYA,EAAYC,aAAcyB,EAAM,GAAGtB,aAG3E,cAAC9F,GAAA,EAAKC,OAAN,CAAa1C,MAAO,IACpB,eAACyC,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,UACI,cAACrC,EAAA,EAAD,CAAQR,MAAM,OAAOpE,QAAQ,4BAA4B2G,KAAG,IAC5D,qBAAKhC,UAAU,gBAAgBhC,MAAO,CAACyG,UAAW,IAAK4H,SAAU,YACjE,cAACnO,EAAA,EAAO0D,MAAR,CAAcC,OAAQ,EAAtB,SACCsK,EAAMpS,OAAS,GACZ,qCACI,cAACmE,EAAA,EAAD,CAAQtJ,QAASA,EAASiK,QApC9C,WACQsM,GACAA,EAAQmB,mBAAmBC,QAAO,SAACC,GAAD,OAAU5Z,EAAY4Z,OAkCDrO,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQmD,SAAUzM,EAASiK,QAhC/C,WACIwM,EAAS,KA+ByDzM,KAAK,kBAKnE,cAACmG,GAAA,EAAKC,OAAN,CAAa1C,MAAO,OCjDjBnF,oBAAS,YAA0C,IAAD,EAAjB1K,EAAiB,EAAjBA,QAE5C,EAAgHwK,IAAxG3B,aAAekO,EAAvB,EAAuBA,cAAe5W,EAAtC,EAAsCA,YAAamG,EAAnD,EAAmDA,eAAgBC,EAAnE,EAAmEA,aAAc/F,EAAjF,EAAiFA,aAAcC,EAA/F,EAA+FA,YAC/F,EAAwCyO,oBAAS,GAAjD,mBAAO8K,EAAP,KAAqBC,EAArB,KACA,EAAsC/K,mBAAS,IAA/C,mBAAOgL,EAAP,KAAoBC,EAApB,KAaA,OACI,cAACjD,GAAA,EAAIC,KAAL,UACI,eAAC7E,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,UACI,cAACrC,EAAA,EAAD,CAAQmE,QAAQ,OAAOxF,KAAK,QAAQvD,QAAQ,WAC3CmO,GACG,cAACtL,EAAA,EAAD,CAAQkG,QAAQ,QACR5E,OAAK,EACLnE,QAASoR,EAAe,SAAW,YACnC5N,QAAS,kBAAM6N,GAAiBD,SAGhD,cAAC1H,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACKmK,EACG,cAACP,GAAD,CAAmBtZ,YAzBvC,SAA2BC,GACvBD,EAAYC,GAAM1B,MAAK,kBAAMub,GAAgB,OAwBsB9X,QAASmE,IAE5D,cAACoK,GAAA,EAAKvB,MAAN,CAAY0I,YAAa,EAAzB,mBACK7X,EAAQ6G,cADb,aACK,EAAgBsH,KAAI,SAAAvH,GAAK,OACtB,eAAC8J,GAAA,EAAD,WACI,cAAC9E,EAAA,EAAD,CAAOP,IAAKzE,EAAMpI,MACjBuY,GACG,eAACtL,EAAA,EAAO0D,MAAR,CAAcpB,OAAK,EAACqB,OAAQ,EAA5B,UACI,cAAC3D,EAAA,EAAD,CACIsB,OAAK,EACLC,MAAM,QACNpE,QAAQ,OACRR,KAAM,QAAUxB,EAAMxH,GACtBwP,SAAUhI,EAAME,OAChB3E,QAASoE,GAAgB2T,IAAgB,QAAUtT,EAAMxH,GACzDgN,QAAS,SAAAmE,GAAC,OArCtD,SAA4B3J,EAAc2J,GACtC4J,EAAe5J,EAAE6J,cAAchS,MAC/B5H,EAAaoG,GAmCyCyT,CAAmBzT,EAAO2J,MAE5C,cAAC9E,EAAA,EAAD,CACIsB,OAAK,EACLC,MAAM,MACNb,KAAK,QACLvD,QAAQ,SACRR,KAAM,UAAYxB,EAAMxH,GACxBwP,SAAUhI,EAAME,OAChB3E,QAASoE,GAAgB2T,IAAgB,UAAYtT,EAAMxH,GAC3DgN,QAAS,SAAAmE,GAAC,OA3CtD,SAA2B3J,EAAc2J,GACrC4J,EAAe5J,EAAE6J,cAAchS,MAC/B3H,EAAYmG,GAyC0C0T,CAAkB1T,EAAO2J,WArB5C3J,EAAMxH,mBCjClCsL,gBAAS,YAA0C,IAAjB1K,EAAgB,EAAhBA,QACtC6I,EAAgB2B,IAAhB3B,aACDyO,EAAQ,CACV,CAACC,SAAU,QAAS1J,OAAQ,kBAAM,cAAC,GAAD,CAAc7N,QAASA,MACzD,CAACuX,SAAU,SAAU1J,OAAQ,kBAAM,cAAC,GAAD,CAAe7N,QAASA,MAC3D,CAACuX,SAAU,aAAc1J,OAAQ,kBAAM,cAAC,GAAD,CAAmB7N,QAASA,MACnE,CAACuX,SAAU,YAAa1J,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAAC0J,SAAU,YAAa1J,OAAQ,kBAAM,cAAC,GAAD,OAE1C,OACI,cAACqJ,GAAA,EAAD,CACIO,KAAM,CAAC1J,OAAO,EAAMe,UAAU,GAC9ByL,aAAa,QACbjD,MAAOA,EACPI,YAAa,SAACnH,EAAGvU,GAAJ,OAAa6M,EAAarB,aAAaxL,EAAK2b,mB,oBCjBtDjN,gBAAS,YAAyC,IAAjB1K,EAAgB,EAAhBA,QAC5C,OACI,cAAC6O,EAAA,EAAD,UACI,eAACyD,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SACI,cAAC9E,GAAA,EAAKoE,MAAN,UACI,eAACpE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACkD,KAAK,QAAQ1D,IAAKrL,EAAQ2B,OAAS,qBACtD,cAACoJ,GAAA,EAAKqF,QAAN,CAAcyE,cAAc,SAA5B,SACI,cAACrH,EAAA,EAAD,CAAQxC,GAAG,KAAKpC,QAAS5I,EAAQ0B,uBAMjD,eAAC4Q,GAAA,EAAKC,OAAN,CAAa1C,MAAO,EAApB,UACI,eAAC2K,GAAA,EAAUrL,MAAX,WACI,cAACqL,GAAA,EAAD,CAAW3N,MAAM,YAAYrJ,MAAOxD,EAAQgF,iBAC5C,cAACwV,GAAA,EAAD,CAAW3N,MAAM,YAAYrJ,MAAOxD,EAAQoH,oBAEhD,cAACqT,GAAA,EAAD,IACA,cAAC,GAAD,CAAcza,QAASA,eCtB5B0K,gBAAS,WACpB,IAAO3K,EAAYkV,cAAZlV,SACP,EAA6EyK,IAAtE3B,aAAelC,EAAtB,EAAsBA,YAAaP,EAAnC,EAAmCA,eAAgBpG,EAAnD,EAAmDA,QAASwH,EAA5D,EAA4DA,aAS5D,OAPA6K,qBAAU,WAEN,OADA1L,EAAY5G,GACL,WACHyH,EAAa,MAElB,CAACb,EAAaa,EAAczH,IAE3BqG,EACO,cAAC2M,GAAD,CAASnK,QAAQ,uBAExB,cAAC0J,GAAA,EAAD,UACI,cAACA,GAAA,EAAKC,OAAN,CAAa1C,MAAO,GAApB,SAEK7P,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCtBlC,SAAS0a,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,mBACtD7L,EAAexE,IAA3BhI,UAAYwM,WACnB,OACI,cAAC,IAAD,2BACQ6L,GADR,IAEIhN,OAAQ,SAACvB,GAAD,OAAW0C,EAAa,cAAC2L,EAAD,eAAerO,IAAW,cAAC,IAAD,CAAUpB,GAAI,UC+DrER,oBAvDf,WACE,IAAMoQ,EAAWC,cACjB,EAAiCvQ,IAA1BzM,EAAP,EAAOA,YAAayE,EAApB,EAAoBA,UAUpB,OARA6P,qBAAU,WACJtU,EAAYK,MACdoE,EAAU2F,UAAU6S,SAAQ,kBAAMjd,EAAYwK,kBAE9CxK,EAAYwK,iBAEb,CAACxK,EAAayE,KAEa,IAA1BzE,EAAYuK,UAA4B,cAACyK,GAAD,CAASnK,QAAQ,mBAE3D,qCAOE,cAAC,IAAD,CAAgB+C,SAAS,eAAesP,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,IAAD,CAAO9P,OAAK,EAAC+P,KAAK,IAAIN,UAAWO,KACjC,cAAC,IAAD,CAAOD,KAAM,QAASrN,OAAQ,kBAE5B,cADA,CACA,sBACE,cAAC,EAAD,IAEA,cAAC/C,EAAA,EAAD,CAAWS,MAAO,CAACkE,UAAW,OAA9B,SAKE,eAAC,IAAD,WACE,cAACiL,GAAD,CAAcvP,OAAK,EAAC+P,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAW,kBAAkBN,UAAWS,KACtD,cAACX,GAAD,CAAcQ,KAAM,CAAK,kBACP,eAAmCN,UAAWU,IAAzBR,EAASld,KAChD,cAAC8c,GAAD,CAAcQ,KAAW,qBAAqBN,UAAWW,KACzD,cAACb,GAAD,CAAcQ,KAAW,UAAUN,UAAW3L,KAC9C,cAAC,IAAD,CAAOiM,KAAW,gBAAgBN,UAAWY,KAC7C,cAAC,IAAD,CAAON,KAAW,SAASN,UAAWa,KACtC,cAAC,IAAD,CAAOb,UAAWlL,sBCjDjBgM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBld,MAAK,YAAkD,IAA/Cmd,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAapB,cAAboB,SAMR,OAJA9J,qBAAU,WACRrK,OAAOoU,SAAS,EAAG,KAClB,CAACD,IAEG,KCGF,IAAM1e,GAAU4e,eAEvBC,IAASzO,OACP,cAACvD,EAAaiS,SAAd,CAAuB/Y,MAAO1F,EAA9B,SACE,eAAC,IAAD,CAAQL,QAASA,GAAjB,UACE,cAACye,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.4d738985.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 4) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n} ","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { Photo, UserActivity, UserProfile } from \"../models/userProfile\";\r\nimport { store } from \"../stores/store\";\r\n\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\naxios.interceptors.response.use(async response => { \r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(500);\r\n    }\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method?.toUpperCase() === 'GET' && data.errors.hasOwnProperty('id')) { \r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const stateErrors = [];\r\n                for (const key in data.errors ) {\r\n                    /* object property accesor syntax */\r\n                    if (data.errors[key]) {\r\n                        stateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw stateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\nconst responseBody = <T> (response : AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`activities/${id}`),\r\n    create: (activity : ActivityFormValues) => requests.post<void>('activities', activity),\r\n    update: (activity : ActivityFormValues) => requests.put<void>(`activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`activities/${id}/attend`, {}),\r\n}\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n}\r\n//keys needs to match parameter in API\r\nconst Profile = {\r\n    get: (username: string) => requests.get<UserProfile>(`/profile/${username}`),\r\n    update: (profile: Partial<UserProfile>) => requests.put(`/profile`, profile),\r\n    updateFollowing: (userName: string) => requests.post(`/follow/${userName}`, {}),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file )\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n        .then(responseBody);\r\n    },\r\n    setMainPhoto: (id: string) => requests.put(`photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`photos/${id}`),\r\n    listFollowing: (userName: string, predicate: string) => requests.get<UserProfile[]>(`/follow/${userName}?predicate=${predicate}`),\r\n    listActivities: (userName: string, predicate: string) => requests.get<UserActivity[]>(`/profile/${userName}/activities?predicate=${predicate}`),\r\n}\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profile \r\n}\r\nexport default agent;","import { UserProfile } from \"./userProfile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    attendees: UserProfile[];\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host: UserProfile;\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(formValues?: ActivityFormValues) {\r\n        Object.assign(this, formValues);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    category: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(formValues?: ActivityFormValues )\r\n    {\r\n        if (formValues) {\r\n            this.id = formValues.id;\r\n            this.title = formValues.title;\r\n            this.date  = formValues.date;\r\n            this.description  = formValues.description;\r\n            this.category  = formValues.category;\r\n            this.city  = formValues.city;\r\n            this.venue  = formValues.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\n\nexport interface UserProfile {\n    userName: string;\n    displayName: string;\n    bio?: string;\n    image?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean\n    photos?: Photo[];\n}\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\nexport class UserProfile implements UserProfile {\n    constructor(user: User) {\n        this.userName = user.userName;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\nexport class UserProfileFormValues {\n    displayName: string = '';\n    bio?: string = undefined;\n\n    constructor(profile: UserProfile ) {\n        this.displayName = profile.displayName;\n        this.bio = profile.bio;\n    }\n}\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string\n    date: Date,\n}","import {format} from 'date-fns';\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\nimport { UserProfile } from \"../models/userProfile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activities = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    formIsOpen: boolean = false;\r\n    loading: boolean = false;\r\n    loadingInitial: boolean = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                //When user changes filter we reset paging\r\n                this.pagingParams = new PagingParams();\r\n                this.activities.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees.some(x => x.userName === user.userName);\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees.find(x => x.userName === activity.hostUserName) as UserProfile\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activities.set(activity.id, activity)\r\n    }\r\n    private getActivity = (id: string) => {\r\n        return this.activities.get(id);\r\n    }\r\n    get agentParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n    get activitiesByDate() {\r\n        return Array.from(this.activities.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime()\r\n        ); \r\n    }\r\n    //property properly computed from a computed property\r\n    get groupedActivities() {\r\n\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                /*we use object property accessor to get the Activity[] which has the particular date \r\n                if the Activity[] is truthy then we \r\n                */\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})/* initial value used to build return value of reduce */\r\n        );\r\n    }\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate)\r\n        {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n\r\n        }\r\n    }\r\n    /*because we are using 'this' keyword the method needs to be \"bound\" to the class.\r\n    we achieve this by using arrow function, alternatively the makeObservable could set it as action.bound\r\n    */\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.agentParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n        } catch(error) {\r\n            console.log(error);\r\n        } finally {\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    //async is syntactic sugar. it compiles to promise syntax\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                \r\n            } finally {\r\n                this.setLoadingInitial(false);\r\n            }\r\n\r\n        }\r\n        //need to return so our return value is guaranteed to be Promise<Activity>\r\n        return activity;\r\n    }\r\n    createActivity = async (formValues: ActivityFormValues) => {\r\n\r\n        const user = store.userStore.user;\r\n        const attendee = new UserProfile(user!);\r\n        try {\r\n            await agent.Activities.create(formValues);\r\n            const activity = new Activity(formValues);\r\n            activity.hostUserName = user!.userName;\r\n            activity.attendees = [attendee];\r\n            this.setActivity(activity);\r\n            //runInAction is necessary to avoid the following MobX warning:\r\n            //\"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed\"\r\n            runInAction(() => {\r\n                this.selectedActivity = activity;\r\n            });\r\n        } catch(error) {\r\n            console.log(error);       \r\n        }\r\n    }\r\n    updateActivity = async (formValues : ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(formValues);\r\n            runInAction(() => {\r\n                if (formValues.id) {\r\n                    let updatedActivity = { \r\n                        ...this.getActivity(formValues.id), ...formValues \r\n                    } as Activity;\r\n                    this.activities.set(formValues.id, updatedActivity);\r\n                    this.selectedActivity = updatedActivity;\r\n                }\r\n                \r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activities.delete(id);\r\n                this.loading = false;\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    let index = this.selectedActivity.attendees.findIndex(x => x.userName === user?.userName);\r\n                    this.selectedActivity.attendees.splice(index, 1);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new UserProfile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n        });\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    clearSelectedActivity = () => {\r\n        runInAction(() => {\r\n            this.selectedActivity = undefined;\r\n        });\r\n    }\r\n    updateAttendeeFollowing = (userName: string) => {\r\n        this.activities.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.userName === userName) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, UserActivity, UserProfile } from \"../models/userProfile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: UserProfile | null = null;\r\n    followings: UserProfile[] = [];\r\n    activities: UserActivity[] = [];\r\n    loadingProfile = false;\r\n    loadingFollowings = false;\r\n    uploadingPhoto = false;\r\n    loadingPhoto = false;\r\n    savingProfile = false;\r\n    loading = false;\r\n    loadingActivities = false;\r\n    activeTab = 0;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                let predicate;\r\n                if (activeTab === 3) predicate = 'followers';\r\n                if (activeTab === 4) predicate = 'following';\r\n                if (predicate) {\r\n                    this.loadFollowing(predicate);\r\n                }\r\n                else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n    loadProfile = async (userName: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profile.get(userName);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n            });\r\n        } catch (error) {\r\n            //don't need to handle becuause we have centralized handling in agent interceptor\r\n            console.log(error);\r\n            \r\n        } finally {\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const photo = await agent.Profile.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.uploadingPhoto = false);\r\n        }\r\n    }\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n            await agent.Profile.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(x => x.isMain)!.isMain = false;\r\n                    this.profile.photos.find(x => x.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingPhoto = false);\r\n        }\r\n    }\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n            await agent.Profile.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    const index = this.profile.photos.findIndex(p => p.id === photo.id);\r\n                    this.profile.photos.splice(index, 1);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingPhoto = false);\r\n        }\r\n    }\r\n    updateProfile = async (profile : Partial<UserProfile>)  => {\r\n        this.savingProfile = true;\r\n        try {\r\n            await agent.Profile.update(profile);\r\n            runInAction(() => {\r\n                if (this.profile?.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName!);\r\n                }\r\n                this.profile = {...this.profile, ...profile as UserProfile};\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.savingProfile = false);\r\n        }\r\n    }\r\n    updateFollowing = async (userName: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profile.updateFollowing(userName);\r\n            store.activityStore.updateAttendeeFollowing(userName)\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName && this.profile.userName === userName) {\r\n                    //user is looking at a different user profile\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\r\n                    //user is looking at their own user profile\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                //forEach doesnt cant do break \r\n                for (let i = 0; i < this.followings.length; i++) {\r\n                    const profile = this.followings[i];\r\n                    if (profile.userName === userName) {\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                        profile.following = !profile.following;\r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => { this.loading = false; })\r\n        }\r\n    }\r\n    loadFollowing = async (predicate: string) => {\r\n        this.loadingFollowings = true\r\n        try {\r\n            const followings = await agent.Profile.listFollowing(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingFollowings = false;\r\n            });\r\n        }\r\n    }\r\n    setActiveTab = (tab: number) => {\r\n        this.activeTab = tab;\r\n    }\r\n    loadActivities = async (userName: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profile.listActivities(userName, predicate!);\r\n            runInAction(() => {\r\n                this.activities = activities;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            });\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            //when we modify an observable we need to do so inside an action\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            //when we modify an observable we need to do so inside an action\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore\n    commentStore : CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore(),\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                /* any time there's a change in this.token, run this: */\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n    )\n    }\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null,\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment, ChatCommentFormVaues } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + \"?activityId=\" + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection\n                .start()\n                .catch(error => console.log('Error establishing connection to hub: ' + error));\n            \n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n\n                runInAction(() => {\n                    //.NET doesn add Z to the time strings returned for some reason\n                    comments.forEach(comment => comment.createdAt = new Date(comment.createdAt + 'Z'));\n                    this.comments = comments\n                });\n            });\n\n            this.hubConnection.on('RecieveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    //using unshift - preserve descending order by createdAt\n                    this.comments.unshift(comment);\n                });\n            });\n        }\n    }\n    stopHubConnection = () => {\n        this.hubConnection?.stop()\n            .catch(error => console.log('Error stopping connection to hub: ' + error));\n    }\n    clearComments = () => {\n        runInAction(() => this.comments = []);\n    }\n    addComment = async (values: ChatCommentFormVaues) => {\n        values.activityId = store.activityStore.selectedActivity!.id;\n        try {\n            debugger;\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n}","import { observer } from \"mobx-react-lite\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore();\n    return (\n        <Menu inverted fixed='top' >\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}></img>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\n                <Menu.Item as={NavLink} to='/errors' name='Test Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profile/${user?.userName}`} \n                                           text='My Profile' \n                                           icon='user' />\n                            <Dropdown.Item onClick={logout} \n                                           text='Log out' \n                                           icon='power' />\n                        </Dropdown.Menu>\n                        \n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    );\n})","import { useField } from \"formik\"\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label? : string;\n    type?: string;\n    autoFocus?: boolean;\n    \n}\n\nexport default function MyTextInput(props: Props) {\n\n    const [field, meta] = useField(props.name);\n    return (\n        /* !! casts the string into a boolean */\n        <Form.Field error={meta.touched &&  !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))\n            }\n        >\n            {({isSubmitting, errors}) => (\n                <Form className='ui form'>\n                    <Header as='h2' content='Log into Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' autoFocus={true}/>\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' \n                        render={() => \n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />\n                        }\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { Message } from \"semantic-ui-react\";\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>)}\n        </Message>\n    );\n}","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))}\n            validationSchema={yup.object({\n                displayName: yup.string().required(),\n                userName: yup.string().required(),\n                email: yup.string().required().email(),\n                password: yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' autoFocus={true}/>\n                    <MyTextInput name='userName' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage name='error' \n                                  render={() => <ValidationErrors errors={errors.error} /> }\n                    />\n                    <Button loading={isSubmitting} positive content='Register' type='submit' fluid \n                            disabled={isSubmitting || !dirty || !isValid} />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage() {\n\n    const { userStore, modalStore} = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1'>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities'/>\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Log in!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                    )}\n            </Container>\n        </Segment>\n    );\n})","import {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from \"./ValidationErrors\";\nimport { useState } from \"react\";\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />}\n        </>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal'/>\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>        \n                </Segment>\n            }\n        </Container>\n    );\n});","import { Link } from \"react-router-dom\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search'/>\n                Opps - we've looked everywhere but could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n}","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 28}}>\r\n                <Header icon='filter' attached color='teal' content='filters' />\r\n                <Menu.Item \r\n                    content='All activities' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    );\r\n})\r\n","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../app/models/userProfile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: UserProfile\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n    const {userStore, profileStore: {loading, updateFollowing}} = useStore();\n\n    if (userStore.user?.userName === profile.userName) return null;\n\n    function handleFollow(e: SyntheticEvent, userName: string) {\n        e.preventDefault();\n        updateFollowing(userName, !profile.following);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} \n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                        fluid\n                        basic\n                        color={profile.following ? 'red' : 'green'} \n                        content={profile.following ? 'Unfollow' : 'Follow'} \n                        loading={loading}\n                        onClick={(e) => handleFollow(e, profile.userName)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../app/models/userProfile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: UserProfile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + \"...\" : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profile/${profile.userName}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} {profile.followersCount === 1 ? 'follower' : 'followers'}\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Image, List, Popup } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../../app/models/userProfile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: UserProfile[];\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}:Props) {\n    const followingStyle = {\n        borderColor: 'orange',\n        borderWidth: 3,\n    };\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                    <Popup \n                        hoverable \n                        key={attendee.userName} \n                        trigger={\n                        <List.Item key={attendee.userName} as={Link} to={`profile/${attendee.userName}`}>\n                            <Image \n                                size='mini' \n                                circular \n                                src={attendee.image || '/assets/user.png'} \n                                style={attendee.following ? followingStyle : null}//style never applied?!\n                            />\n                        </List.Item>\n                        }\n                    >\n                        <Popup.Content>\n                            <ProfileCard profile={attendee} />\n                        </Popup.Content>\n                    </Popup>\n\n\n                    \n            ))}\n        </List>\n    );\n})","import { format } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\n\ninterface Props {\n    activity : Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n\n    return (\n        <Segment.Group className='activity-listItem'>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} style={{marginBottom: 5}} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profile/${activity.host?.userName}`}>{activity.host?.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && activity.isHost === false && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy HH:mm')}\n                    <Icon name='marker'/> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees} />\n            </Segment>\n            <Segment clearing>{/* clears any previous floats */}\n                <span>{activity.description}</span>\n                <Button \n                    as={Link} \n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n\n        </Segment.Group>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport { Fragment } from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nexport default observer(function ActivityList() {\n\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    \n                    {activities.map(activity => ( \n                        <ActivityListItem key={activity.id} activity={activity} /> \n                    ))}\n                </Fragment>\n            ))}\n\n        </>\n\n    )\n});","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    // destructuring the activityStore property from the Store object returned\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activities, setPagingParams, pagination, loadingInitial} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n    \r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    //VERY IMPORTANT to pass a DependencyList to useEffect\r\n    //lest the component will re-render itself endlessly fetching data\r\n    useEffect(() => {\r\n        if (activities.size <= 1) loadActivities();\r\n    }, [activities.size, loadActivities] );\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                 ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        //loader={<Loading content='Loading more...'/>}\r\n                        initialLoad={true}\r\n                    >\r\n                    <ActivityList />\r\n                    </InfiniteScroll>\r\n                 )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function Loading({ inverted = true, content = 'Loading...' }  : Props) {\n    return (\n        <Dimmer active={false} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { ChatCommentFormVaues } from '../../../app/models/comment';\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns/esm';\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {//run on close component\n            commentStore.clearComments();\n            commentStore.stopHubConnection();\n        }\n    }, [commentStore, activityId]) \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Comment.Group>\n                    <Formik onSubmit={(values, {resetForm}) => commentStore.addComment(values as ChatCommentFormVaues).then(() => resetForm())}\n                            initialValues={{body: '' }}\n                            validationSchema={Yup.object({\n                                body: Yup.string().required(),\n                                \n                            })}\n                        >\n                            {({isSubmitting, isValid, handleSubmit}) => (\n                                <Form className='ui form'>\n\n                                    <Field name='body'>\n                                        {(props: FieldProps) => (\n                                            <div style={{ position: 'relative' }}>\n                                                <Loader active={isSubmitting} />\n                                                <textarea \n                                                    placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\n                                                    rows={2}\n                                                    {...props.field}\n                                                    onKeyPress={e => {\n                                                        if (e.key === 'Enter' && e.shiftKey) {\n                                                            return;\n                                                        }\n                                                        if (e.key === 'Enter' && !e.shiftKey) {\n                                                            e.preventDefault();\n                                                            isValid && handleSubmit();\n                                                        }\n                                                    }}\n                                                />\n                                            </div>\n                                            \n                                        )}\n                                    </Field>\n                                </Form>\n                            )}\n                        </Formik>\n                    \n                     {commentStore.comments.map((comment) => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                {comment.authorName ? \n                                    (\n                                        <Comment.Author as={Link} to={`/profile/${comment.authorName}`}>\n                                            {comment.authorDisplayName}\n                                        </Comment.Author>\n                                    ) : (\n                                        <Comment.Author style={{fontStyle: 'italic', color: 'grey'}}>\n                                            deleted user\n                                        </Comment.Author>) }\n                                \n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)}</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                                {/* <Comment.Actions>\n                                    <Comment.Action>Reply</Comment.Action>\n                                </Comment.Actions> */}\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","export const dateFormat = \"dd MMM yyyy\"\nexport const dateTimeFormat = dateFormat + \" HH:mm\";","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport { dateFormat } from '../../../app/common/globalization/dateFormat';\nimport { Activity } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore()\n    return (\n        <Segment.Group>\n            {activity.isCancelled &&\n                <Label ribbon color='red' content='Cancelled' style={{position: 'absolute ', zIndex: 1000, \n                       left: -14, top: 20}} />\n            }\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            \n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, dateFormat)}</p>\n                                <p>\n                                    Hosted by  \n                                    <strong>\n                                        <Link to={`/profile/${activity.host?.userName}`}>\n                                            {activity.host?.displayName}\n                                        </Link>\n                                    </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red' } \n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity' }\n                                floated='left' basic onClick={cancelActivityToggle} loading={loading} />\n\n                        <Button disabled={activity.isCancelled} as={Link} to={`/manage/${activity.id}`}color='orange' floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button disabled={activity.isCancelled} onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled} onClick={updateAttendance} loading={loading} color='teal'>Join Activity</Button>\n                )}\n                \n               \n                \n            </Segment>\n        </Segment.Group>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport { dateTimeFormat } from '../../../app/common/globalization/dateFormat';\nimport { Activity } from '../../../app/models/activity';\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n                {format(activity.date!, dateTimeFormat)}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}:Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going \n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item key={attendee.userName} style={{ position: 'relative' }}>\n                            {attendee.userName === host?.userName && \n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profile/${attendee.userName}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                                \n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport Loading from \"../../../app/layout/Loading\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    //need to tell the hook about type info\n    const {id} = useParams<{id : string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n\n        return () => {\n            clearSelectedActivity();\n        }\n    }, /* dependencies */[id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <Loading />;\n    return (\n       <Grid>\n           <Grid.Column width={10}>\n               <ActivityDetailedHeader activity={activity}/>\n               <ActivityDetailedInfo activity={activity}/>\n               <ActivityDetailedChat activityId={activity?.id}/>\n           </Grid.Column>\n           <Grid.Column width={6}>\n               <ActivityDetailedSideBar activity={activity} />\n           </Grid.Column>\n       </Grid>\n    )\n});","import { observer } from \"mobx-react-lite\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    );\n})","import { useField } from \"formik\"\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number\n    label? : string\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        /* !! casts the string into a boolean */\n        <Form.Field error={meta.touched &&  !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from \"formik\"\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any\n    label? : string\n}\n\nexport default function MyTextSelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        /* !! casts the string into a boolean */\n        <Form.Field error={meta.touched &&  !!meta.error}>\n            <label>{props.label}</label>\n            <Select clearable \n                    options={props.options}\n                    value={field.value || null}\n                    onChange={(event, data) => helpers.setValue(data.value)}\n                    onBlur={() => helpers.setTouched(true)}\n                    placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","export const categoryOptions = [\n    { text: 'Drinks', value: 'drinks'},\n    { text: 'Culture', value: 'culture'},\n    { text: 'Film', value: 'film'},\n    { text: 'Food', value: 'food'},\n    { text: 'Music', value: 'music'},\n    { text: 'Travel', value: 'travel'},\n];","\r\nimport { useField } from 'formik';\r\nimport DatePicker, { ReactDatePickerProps} from 'react-datepicker';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        /* !! casts the string into a boolean */\r\n        <Form.Field error={meta.touched &&  !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport Loading from \"../../../app/layout/Loading\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from \"formik\";\nimport * as yup from 'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MyTextSelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\nimport { dateTimeFormat } from \"../../../app/common/globalization/dateFormat\";\n\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {loadingInitial, createActivity, updateActivity, loadActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n    const validationSchema = yup.object({\n        title: yup.string().required(),\n        description: yup.string().required(),\n        category: yup.string().required(),\n        date: yup.string().required('Date is required').nullable(),\n        venue: yup.string().required(),\n        city: yup.string().required(),\n\n    })\n    const [activityFormValues, setActivityFormValues] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    //useEffect is run on render, and will re-run each time dependencies change\n    useEffect(() => {\n        //! is used to ignore typescript, since we expect no scenario in which loadActivity returns undefined\n        if (id) \n            loadActivity(id).then(activity => setActivityFormValues(new ActivityFormValues(activity)));\n        \n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity : ActivityFormValues) {\n        if (activity.id) {\n            updateActivity(activity).then(() => { history.push(`/activities/${activity.id}`) });\n            \n        } else {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            }\n            createActivity(newActivity).then(() => { history.push(`/activities/${newActivity.id}`) });\n        }\n    }\n\n    if (loadingInitial) return <Loading content='Loading activity...'/>\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik \n                validationSchema={validationSchema}\n                initialValues={activityFormValues} \n                enableReinitialize \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\n                        <MyTextInput placeholder='Title' name='title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description'/>\n                        <MyTextSelectInput options={categoryOptions} placeholder='Category' name='category'/>\n                        <MyDateInput \n                            placeholderText='Date' \n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat={dateTimeFormat}\n                            timeFormat='HH:mm'\n                        />\n                        <Header content='Location Details' sub color='teal'/>\n                        <MyTextInput placeholder='City' name='city'/>\n                        <MyTextInput placeholder='Venue' name='venue'/>\n                        <Button \n                            content='Submit'\n                            loading={isSubmitting}\n                            floated='right'\n                            positive type='submit'\n                            disabled={isSubmitting || !dirty || !isValid}\n                        />\n                        <Button content='Cancel' as={Link} to='/activities' floated='right' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n});","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { UserProfile, UserProfileFormValues } from \"../../app/models/userProfile\";\nimport * as yup from 'yup';\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: UserProfile;\n    setEditMode: (mode: boolean) => void; \n} \nexport default observer(function ProfileEditForm({profile, setEditMode}: Props) {\n    const {profileStore: {updateProfile}} = useStore();\n    return (\n        <Formik \n            initialValues={{...new UserProfileFormValues(profile), error: null}}\n            onSubmit={(values) => updateProfile(values).then(() => { setEditMode(false); })}\n            validationSchema={yup.object({\n                displayName: yup.string().required()\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput name='displayName' placeholder='Display Name' autoFocus={true}/>\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <ErrorMessage \n                        name='error' \n                        render={() => \n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />\n                        }\n                    />\n                    <Button floated='right' loading={isSubmitting} positive content='Submit' type='Update Profile' \n                            disabled={isSubmitting || !dirty || !isValid} />\n                </Form>\n            )}\n        </Formik>\n    );\n});","import { observer } from \"mobx-react-lite\";\nimport { useState } from \"react\";\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../app/models/userProfile\";\nimport { useStore } from \"../../app/stores/store\";\nimport UpdateForm from \"./ProfileEditForm\";\n\ninterface Props {\n    profile: UserProfile;\n}\n\nexport default observer(function ProfileAbout({profile}: Props) {\n\n    const { profileStore: {isCurrentUser} } = useStore();\n    const [editMode, setMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content={`About ${profile.displayName}`} />\n                    {isCurrentUser && ( \n                        <Button floated='right' \n                                basic \n                                content={editMode ? 'Cancel' : 'Edit Profile'} \n                                onClick={() => setMode(!editMode)}  />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {editMode ? (\n                        <UpdateForm profile={profile} setEditMode={setMode}/>\n                    ) : (\n                        <span style={{whiteSpace: 'pre-wrap'}}>\n                            {profile.bio}\n                        </span>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/userProfile\";\r\n\r\ninterface Props {\r\n    activity: UserActivity;\r\n}\r\n\r\nexport default observer(function ProfileActivityCard({activity}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/activities/${activity.id}`}>\r\n            <Image \r\n                style={{ minHeight: 100, ojectFit: 'cover' }} \r\n                src={`/assets/categoryImages/${activity.category}.jpg` || '/assets/placeholder.png'} \r\n            />\r\n            <Card.Content>\r\n                <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'HH:mm')}</div>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useEffect } from \"react\";\r\nimport { Card, Grid, Header, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserProfile } from \"../../app/models/userProfile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivityCard from \"./ProfileActivityCard\";\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n    profile: UserProfile;\r\n}\r\n\r\nexport default observer(function ProfileActivities({profile}: Props) {\r\n    const {profileStore: {activities, loadingActivities, loadActivities}} = useStore();\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' }},\r\n        { menuItem: 'Past Events', pane: { key: 'past' }},\r\n        { menuItem: 'Hosting Events', pane: { key: 'hosting' }},\r\n    ];\r\n    useEffect(() => {\r\n        loadActivities(profile.userName);\r\n    }, [loadActivities, profile])\r\n\r\n    function handleTabChange(e: SyntheticEvent, data: TabProps) {\r\n        loadActivities(profile.userName, panes[data.activeIndex as number].pane.key)\r\n    }\r\n    return (\r\n        \r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                <Header floated='left' icon='calendar' content={`Activities`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{secondary: true, pointing: true}}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {activities.map(a => {\r\n                            return <ProfileActivityCard key={a.id} activity={a} />\r\n                        })}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n    let headerContent;\n    if (activeTab === 3) {\n        headerContent = `People following ${profile?.displayName}`;\n    }\n    if (activeTab === 4) {\n        headerContent = `People ${profile?.displayName} is following`;\n    }\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left'\n                        icon='user'\n                        content={headerContent}\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => {\n                            return <ProfileCard key={profile.userName} profile={profile} />\n                        })}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import { Cropper } from \"react-cropper\";\nimport 'cropperjs/dist/cropper.css'\n\ninterface Props {\n    setCropper: (cropper: Cropper) => void,\n    imagePreview: string;\n}\n\nexport default function PhotoWidgetCropper({setCropper, imagePreview}: Props) {\n\n    return (\n        //Rectangular images are gonna cause mayhem in our CSS\n        //Enfore square images!\n\n        //\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}} \n            initialAspectRatio={1} \n            aspectRatio={1} \n            preview='.image-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n            >\n\n        </Cropper>\n    );\n}","import {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropZone({setFiles}:Props) {\n\n    const dzStyle = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200,\n    }\n    const dzActiveStyle = {\n        borderColor: 'green',\n    }\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, { preview: URL.createObjectURL(file)})))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyle, ...dzActiveStyle} : dzStyle}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { Button, Grid, Header } from \"semantic-ui-react\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\n\ninterface MyFile extends File {\n    preview : string;\n}\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    \n    const [files, setFiles] = useState<MyFile[]>([]);\n    const [cropper, setCropper] = useState<Cropper>()\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\n        }\n    }\n    function onCancelCrop() {\n        setFiles([]);\n    }\n\n    useEffect(() => {\n        //ObjectURL will hang out in memory if not cleaned up\n        return () => {\n            files.forEach((file: MyFile) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 1 - Add Photo' sub />\n                <PhotoWidgetDropZone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 2 - Resize Image' sub />\n                {files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 3 - Preview & Upload' sub />\n                <div className='image-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\n                <Button.Group widths={2}>\n                {files.length > 0 && (\n                    <>\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\n                        <Button disabled={loading} onClick={onCancelCrop} icon='close' />\n                    </>\n                )}\n                </Button.Group>\n            </Grid.Column>\n            <Grid.Column width={1} />\n        </Grid>\n    );\n}","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent, useState } from \"react\";\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, UserProfile } from \"../../app/models/userProfile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: UserProfile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n\n    const { profileStore: {isCurrentUser, uploadPhoto, uploadingPhoto, loadingPhoto, setMainPhoto, deletePhoto} } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [targetPhoto, setTargetPhoto] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTargetPhoto(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTargetPhoto(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && ( \n                        <Button floated='right' \n                                basic \n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                                onClick={() => setAddPhotoMode(!addPhotoMode)}  />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploadingPhoto} />\n                    ) : (\n                        <Card.Group itemsPerRow={5} >\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main-' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={loadingPhoto && targetPhoto === 'main-' + photo.id }\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button \n                                                basic \n                                                color='red' \n                                                icon='trash' \n                                                content='Delete'\n                                                name={'delete-' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={loadingPhoto && targetPhoto === 'delete-' + photo.id }\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                \n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Tab } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../app/models/userProfile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\ninterface Props {\n    profile: UserProfile;\n}\n// TODO remove profile deps from components, instead fetch profile from store\nexport default observer(function ProfileContent({profile}:Props) {\n    const {profileStore} = useStore();\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />}, \n        {menuItem: 'Activities', render: () => <ProfileActivities profile={profile} />}, \n        {menuItem: 'Followers', render: () => <ProfileFollowings />}, \n        {menuItem: 'Following', render: () => <ProfileFollowings />}, \n    ]\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex as number)}\n        />\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\nimport { UserProfile } from \"../../app/models/userProfile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile: UserProfile;\n}\n//even though this component doesn't need userStore functions, \n//we still need to observe the store in order to react to changes to the profile\nexport default observer(function ProfileHeader({profile}:Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName}/>\n                            </Item.Content>\n\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Grid } from \"semantic-ui-react\";\nimport Loading from \"../../app/layout/Loading\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore: {loadProfile, loadingProfile, profile, setActiveTab}} = useStore();\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, setActiveTab, username] );\n\n    if (loadingProfile) \n        return <Loading content='Loading profile...'/>\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {/* For some reason the bang operator wouldn't work here */}\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile}/>\n                    </>\n                }\n                \n            </Grid.Column>\n        </Grid>\n    );\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to ='/' />}\r\n        />\r\n    );\r\n}","import NavBar from './NavBar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport TestErrors from '../../features/errors/TestErrors';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport { Container } from 'semantic-ui-react';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if (commonStore.appLoaded === false) return <Loading content='Loading app...' />\r\n  return (\r\n    <>\r\n      {/* 1. the Route path properties determines what gets rendered.\r\n             every matching path gets rendered along side each other\r\n\r\n          2. Components highlighted in yellow are regular react components,\r\n             whereas the others are decorated with observer functions (mobx-react-lite)\r\n       */}\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage}/>\r\n      <Route path={'/(.+)'} render={() => (\r\n        //fragment (shorthand) is needed because JSX expressions must have a singular parent element\r\n        <>\r\n          <NavBar/>\r\n\r\n          <Container style={{marginTop: '7em'}}>\r\n            {/* Purpose of switch is only 1 route can be active \r\n                Since we re-use ActivityForm for different routes, it's important to set a key\r\n                  otherwise requesting createActivity will not clear the form \r\n            */}\r\n            <Switch>\r\n              <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\r\n              <PrivateRoute path=      '/activities/:id' component={ActivityDetails}/>\r\n              <PrivateRoute path={[    '/createActivity', \r\n                                '/manage/:id']} key={location.key} component={ActivityForm}/>\r\n              <PrivateRoute path=      '/profile/:username' component={ProfilePage} />\r\n              <PrivateRoute path=      '/errors' component={TestErrors} />\r\n              <Route path=      '/server-error' component={ServerError} />\r\n              <Route path=      '/login' component={LoginForm} />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n\r\n          </Container>\r\n        </>\r\n\r\n      )}/>\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport './app/layout/styles.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history} >\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}